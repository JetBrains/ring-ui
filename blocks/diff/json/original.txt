/**
 * @fileoverview Button demo-class.
 * @author igor.alexeenko (Igor Alexeenko)
 */


/**
 * @param {string} caption
 * @param {Element} parentEl
 * @constructor
 */
var Button = function (caption, parentEl) {
  /**
   * @type {HTMLElement}
   * @private
   */
  this.element_ = document.createElement('button');
  this.element_.innerText = caption;

  this.setListenersEnabled_(true);

  parentEl.appendChild(this.element_);
};

/**
 * @enum {string}
 */
Button.EventType = {
  MOUSEDOWN: 'mousedown',
  MOUSEUP: 'mouseup',
  MOUSEOVER: 'mouseover',
  MOUSEOUT: 'mouseout'
};

/**
 * @enum {state}
 */
Button.State = {
  NULL: 0x00,
  HOVERED: 0x01,
  PRESSED: 0x02,
  DISABLED: 0x04,
  ALL: 0xFF
};

/**
 * @enum {string}
 */
Button.ClassName = {
  PRESSED: 'pressed',
  HOVERED: 'hovered'
};

/**
 * @type {Button.State}
 * @private
 */
Button.prototype.state_ = Button.State.NULL;

/**
 * @type {number}
 * @protected
 */
Button.prototype.availableStates =
    Button.State.HOVERED |
        Button.State.PRESSED |
        Button.State.DISABLED;

/**
 * @param {Button.State} state
 * @param {boolean} enable
 */
Button.prototype.enableState = function (state, enable) {
  if (this.availableStates | state) {
    this.state_ = enable ? this.state_ | state : ~state & this.state_;
    this.enableStateInternal(state, enable);
  }
};

/**
 * Sets button's class name from its state.
 * @param {Button.State} state
 * @param {boolean} enable
 */
Button.prototype.enableStateInternal = function (state, enable) {
  if (!this.stateToClassName_) {
    /**
     * Lookup table of states of button to CSS class names, according to this
     * classes.
     * @type {Object.<Button.State, Button.ClassName>}
     */
    this.stateToClassName_ = {};
    this.stateToClassName_[Button.State.HOVERED] = Button.ClassName.HOVERED;
    this.stateToClassName_[Button.State.PRESSED] = Button.ClassName.PRESSED;
  }

  this.element_.className = '';

  Object.keys(this.stateToClassName_).forEach(function (stateID) {
    if (this.hasState(stateID)) {
      this.element_.classList.add(this.stateToClassName_[stateID]);
    }
  }, this);
};

/**
 * @param {Button.State} state
 * @returns {boolean}
 */
Button.prototype.hasState = function (state) {
  return Boolean(this.state_ & state);
};

/**
 * @param {boolean} enabled
 * @private
 */
Button.prototype.setListenersEnabled_ = function (enabled) {
  if (this.handlersAreEnabled_ === enabled) {
    return;
  }

  /**
   * @type {boolean}
   * @private
   */
  this.handlersAreEnabled_ = enabled;

  if (enabled) {
    this.element_.addEventListener(
        Button.EventType.MOUSEDOWN,
        this.onMouseDown_.bind(this));
    this.element_.addEventListener(
        Button.EventType.MOUSEUP,
        this.onMouseUp_.bind(this));
    this.element_.addEventListener(
        Button.EventType.MOUSEOVER,
        this.onMouseOver_.bind(this));
    this.element_.addEventListener(
        Button.EventType.MOUSEOUT,
        this.onMouseOut_.bind(this));
  } else {
    this.element_.removeEventListener(
        Button.EventType.MOUSEDOWN,
        this.onMouseDown_.bind(this));
    this.element_.removeEventListener(
        Button.EventType.MOUSEUP,
        this.onMouseUp_.bind(this));
    this.element_.removeEventListener(
        Button.EventType.MOUSEOVER,
        this.onMouseOver_.bind(this));
    this.element_.removeEventListener(
        Button.EventType.MOUSEOUT,
        this.onMouseOut_.bind(this));
  }
};

/**
 * @param {Event} event
 * @private
 */
Button.prototype.onMouseDown_ = function (event) {
  this.enableState(Button.State.PRESSED, true);
};

/**
 * @param {Event} event
 * @private
 */
Button.prototype.onMouseUp_ = function (event) {
  this.enableState(Button.State.PRESSED, false);
};

/**
 * @param {Event} event
 * @private
 */
Button.prototype.onMouseOver_ = function (event) {
  this.enableState(Button.State.HOVERED, true);
};

/**
 * @param {Event} event
 * @private
 */
Button.prototype.onMouseOut_ = function (event) {
  this.enableState(Button.State.HOVERED, false);
};

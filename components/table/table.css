@value global: '../global/global.css';
@value unit, main-color, text-color, border-hover-color, dark-gray-color, darker-gray-color, line-color, sidebar-background-color, selected-background-color, font-smaller-lower, fast-ease, fixed-z-index, ellipsis from global;
@value height: calc(4 * unit);
@value compensate: 2px;
@value compensated: calc(height - compensate);

.tableWrapper {
  position: relative;
}

.table {
  width: 100%;

  border-spacing: 0;
}

.userSelectNone {
  user-select: none;
}

.headerCell {
  & {
    composes: font-smaller-lower;

    box-sizing: border-box;
    height: calc(unit * 3);
    padding-right: calc(unit * 5);

    text-align: left;
    white-space: nowrap;

    color: dark-gray-color;
    box-shadow: inset 0 -1px 0 0 line-color;

    font-weight: 200;
  }

  &:first-child {
    padding-left: calc(unit * 2);
  }

  &:last-child {
    width: 100%;
    padding-right: calc(unit * 4);
  }

  &:nth-child(1):only-child {
    width: initial;
    max-width: none;
  }

  &.headerCellSorted {
    font-weight: 500;
  }

  &.headerCellSortable {
    cursor: pointer;
  }

  & .sorter {
    position: absolute;

    display: none;

    margin-left: 6px;

    user-select: none;
  }

  &.headerCellSortable .sorter {
    display: inline-block;
  }

  & .sorter .icon {
    top: -2px;
  }
}

.caption {
  letter-spacing: 0.2em;
  text-transform: uppercase;
}

.subHeaderFixed {
  position: fixed;
  z-index: fixed-z-index;
  top: 0;

  background-color: rgba(256, 256, 256, 0.95);
}

.row {
  & {
    outline: none;

    line-height: compensated;
  }

  @nest .table:not(.multiSelection) &.rowFocused,
  .rowSelected {
    background-color: sidebar-background-color;
  }

  @nest .table:not(.disabledHover) &:hover {
    background-color: selected-background-color;
  }

  &.rowFocused {
    box-shadow: inset 0 2px border-hover-color, inset 0 -2px border-hover-color;

    /* we need vertical box-shadows on cells not rows because of IE =( */
    & > .cell:first-child {
      box-shadow: inset 2px 0 border-hover-color;
    }

    & > .cell:last-child {
      box-shadow: inset -2px 0 border-hover-color;
    }
  }
}

.loadingOverlay {
  position: absolute;
  top: 0;
  right: 0;
  bottom: 0;
  left: 0;

  display: flex;
  align-items: center;
  justify-content: center;

  background-color: rgba(255, 255, 255, 0.5);
}

.cell {
  & {
    composes: ellipsis;

    box-sizing: content-box;

    min-width: 0;

    height: height;
    padding: 0 calc(unit * 5) compensate 0;

    color: text-color;
  }

  &:first-child {
    padding-left: calc(unit * 2);
  }

  &:last-child {
    width: 100%;

    /* Markup hack, allows cell to have content which is wider than cell and collapses it */

    max-width: 0;
    padding-right: calc(unit * 4);
  }

  &:nth-child(1) {
    min-width: calc(unit * 37);
    max-width: calc(unit * 77);
  }

  &:nth-child(1):only-child {
    width: initial;
    max-width: none;
  }
}

.cellUnlimited {
  width: 100%;
}

.cellRight {
  text-align: right;
}

.metaColumn {
  position: relative;

  float: left;

  width: 21px;
  height: 16px;
  padding-right: 0;
}

.dragHandle {
  top: top;

  left: calc(-2 * unit);

  cursor: grab;

  opacity: 0;

  @value top: -5px;

  /* override button */
  && {
    position: absolute;

    height: calc(height - top);
  }

  &&& {
    padding: 0;
  }
}

.dragHandle.visibleDragHandle,
.row:hover .dragHandle {
  opacity: 1;
}

.draggingRow {
  background-color: selected-background-color;

  &&& .dragHandle {
    cursor: grabbing;

    opacity: 1;

    & svg {
      color: main-color;
    }
  }
}

@value unit, font-lower, font-size-smaller, line-height-lowest, line-color, dark-line-color, white-color, gray-color, dark-gray-color, darker-gray-color, main-color, error-color, text-color, ease, fast-ease from  "../global/global.css";
@value text-shadow: 0 0 0;

.container {
  composes: font-lower;

  position: relative;

  box-sizing: border-box;
  min-height: calc(unit * 8);
  padding-top: calc(unit * 2);

  & * {
    box-sizing: border-box;
  }
}

.borderless {
  min-height: calc(unit * 4);
  padding: 0;
}

.input {
  width: 100%;
  min-height: calc(unit * 4);
  padding: 0 0 3px;

  border: none;
  outline: none;
  background: transparent;

  font: inherit;
  caret-color: main-color;

  @nest .clearable & {
    padding-right: calc(unit * 3);
  }

  @nest .light & {
    color: text-color;
  }

  @nest .dark & {
    color: white-color;
  }

  &::placeholder {
    color: transparent;
    text-shadow: none;
  }

  &[disabled] {
    color: gray-color;
  }

  /*
    Kill yellow webkit autocomplete
    https://css-tricks.com/snippets/css/change-autocomplete-styles-webkit-browsers/
  */
  &:-webkit-autofill {
    &,
    &:hover,
    &:focus {
      transition: background-color 50000s ease-in-out 0s;
    }

    & ~ .label {
      top: calc(unit / 2);

      font-size: font-size-smaller;
    }
  }

  /* if you need a cross, pass onClear prop */
  &::-ms-clear {
    display: none;
  }
}

.clear {
  position: absolute;
  top: 16px;

  right: 0;

  @nest .empty & {
    display: none;
  }

  @nest .borderless & {
    top: 0;
  }
}

/* override Button */
.clear.clear {
  line-height: calc(unit * 4);
}

textarea.input {
  overflow: hidden;

  box-sizing: border-box;
  padding-top: unit;

  resize: none;
}

.label {
  position: absolute;
  top: calc(unit * 3 - 2px);
  left: 0;

  transition: font-size fast-ease, top fast-ease, color fast-ease;
  pointer-events: none;

  @nest .light & {
    color: dark-gray-color;
  }

  @nest .dark & {
    color: darker-gray-color;
  }
}

.input:focus ~ .label,
.container.active > .label,
.container:not(.empty) > .label {
  top: calc(unit / 2);

  font-size: font-size-smaller;
}

.noLabel ::placeholder,
.input:focus::placeholder {
  transition: text-shadow ease;
}

.light.noLabel ::placeholder,
.light :focus::placeholder {
  text-shadow: text-shadow gray-color;
}

/* stylelint-disable-next-line selector-max-specificity */
.dark.noLabel ::placeholder,
/* stylelint-disable-next-line selector-max-specificity */
.dark :focus::placeholder {
  text-shadow: text-shadow text-color;
}

.input:focus ~ .label {
  color: main-color;
}

.error > :focus ~ .label {
  color: error-color;
}

.underline {
  height: 1px;

  border-bottom-width: 1px;
  border-bottom-style: solid;

  @nest .light & {
    border-color: line-color;
  }

  @nest .dark & {
    border-color: dark-line-color;
  }
}

.input[disabled] ~ .underline {
  border-bottom-style: dashed;
}

.focusUnderline,
.errorUnderline {
  width: 0;
  height: 2px;
}

.focusUnderline {
  margin-top: -1px;

  background: main-color;
}

.errorUnderline {
  margin-top: -2px;

  background: error-color;
}

.input:focus ~ .focusUnderline,
.container.active > .focusUnderline,
.error > .errorUnderline {
  width: 100%;

  transition: width 0.15s ease-out;
}

.errorText {
  overflow: hidden;

  box-sizing: border-box;
  height: 0;
  padding: calc(unit / 2) 0 unit;

  transition: height 0.3s ease-out;

  color: error-color;

  font-size: font-size-smaller;
  line-height: line-height-lowest;
}

.sizeS {
  width: calc(unit * 12);
}

.sizeM {
  width: calc(unit * 30);
}

.sizeL {
  width: calc(unit * 50);
}

.sizeFULL {
  width: 100%;
}

window.source = {
  "title": "Permissions Ng",
  "url": "permissions-ng.html",
  "type": "js",
  "content": "/**\n * @name Permissions Ng\n * @tags Ring UI Language\n * @category Legacy Angular\n */\nimport angular from 'angular';\nimport 'dom4';\n\nimport '../auth-ng/auth-ng';\nimport Permissions from '../permissions/permissions';\nimport PermissionCache from '../permissions/permissions__cache';\n\nimport './permissions-ng.scss';\n\nfunction registerPermission(element) {\n  const somePermissionsCtrl = element.controller('rgSomePermissions');\n  return somePermissionsCtrl && somePermissionsCtrl.registerPermission() || angular.noop;\n}\n\n\nconst angularModule = angular.module('Ring.permissions', ['Ring.auth']);\n\n/**\n * @ngdoc object\n * @name userPermissions\n *\n * @description\n * Configured instance of Permissions object.\n *\n * Configure:\n * @example\n * <pre>\n * angular.config(['userPermissionsProvider', function (userPermissionsProvider) {\n *   userPermissionsProvider.config({\n *     serviceId: '0-0-0-0-0',\n *     prefix: 'jetbrains.jetpass.'\n *   });\n * }]);\n * </pre>\n *\n * @requires auth\n */\n\n/**\n * @typedef {Object} permissionsNgConfig\n * @property {?string} serviceId\n * @property {?string} prefix\n */\nangularModule.provider('userPermissions', function provider() {\n  /**\n   * @type {permissionsNgConfig}\n   */\n  let _config = {};\n\n  /**\n   * @param {permissionsNgConfig} config\n   */\n  this.config = config => {\n    _config = config;\n  };\n\n  this.$get = (auth, $q, $http) => {\n    const apiUri = auth.auth.getAPIPath() + Permissions.API_PERMISSION_CACHE_PATH;\n\n    async function datasource(query) {\n      const {data} = await $http.get(apiUri, {\n        params: {\n          fields: 'permission/key,global,projects(id)',\n          query\n        }\n      });\n\n      return data;\n    }\n\n    _config.datasource = _config.datasource || datasource;\n\n    const permissions = new Permissions(auth.auth, _config);\n\n    // Override load to execute in $digest\n    permissions.load = function load() {\n      return $q.when(Permissions.prototype.load.call(this));\n    };\n\n    return permissions;\n  };\n});\n\n/**\n * @ngdoc directive\n * @name permission\n *\n * @description\n * The `permission` directive show or hide a portion of the DOM tree (HTML) depending\n * on the logged in user permissions. If the user has listed permissions then the DOM tree\n * is shown, otherwise it is hidden.\n * @example\n <example name=\"rgPermission directive\">\n <file name=\"index.html\">\n <div rg-permission=\"project-read\" in-project=\"0-0-0-0-0\">\n Is visible if user has permission 'read-project' in project 0-0-0-0-0.\n </div>\n <div rg-permission=\"{{scopeVariableName}}\" in-project=\"0-0-0-0-0\">\n Is visible if user has permission 'read-project' in project 0-0-0-0-0.\n </div>\n <div rg-permission=\"project-read\">\n Is visible if user has permission 'read-project' at least in one project.\n </div>\n <div rg-permission=\"project-read\" in-global>\n Is visible if user has permission 'read-project' at project \"global\".\n </div>\n </file>\n </example>\n *\n * @restrict A\n * @element ANY\n * @requires userPermissions\n */\nangularModule.directive(\n  'rgPermission',\n  function rgPermissionDirective(userPermissions, $interpolate) {\n    return {\n      controller: function controller($scope, $element, $attrs) {\n        const element = $element[0];\n\n        //noinspection JSPotentiallyInvalidUsageOfThis\n        this.permitted = false;\n\n        element.classList.add('ring-permission-hide');\n\n        const permission = $interpolate($attrs.rgPermission)($scope);\n\n        const projectId = $attrs.hasOwnProperty('inGlobal')\n          ? PermissionCache.GLOBAL_PROJECT_ID\n          : $scope.$eval($attrs.inProject);\n\n        userPermissions.check(permission, projectId).\n          then(permitted => {\n            this.permitted = permitted;\n            if (permitted) {\n              element.classList.remove('ring-permission-hide');\n            }\n            return permitted;\n          }).\n          then(registerPermission($element));\n      }\n    };\n  }\n);\n\n/**\n * @ngdoc directive\n * @name permissionIf\n *\n * @description\n * The `permission` directive transcludes or not a portion of the DOM tree (HTML) depending\n * on the logged in user permissions. If the user has listed permissions then the DOM tree\n * is transcluded, otherwise it is not.\n * @example\n <example name=\"rgPermissionIf directive\">\n <file name=\"index.html\">\n <div rg-permission-if=\"project-read\" in-project=\"0-0-0-0-0\">\n Is transcluded if user has permission 'read-project' in project 0-0-0-0-0.\n </div>\n <div rg-permission-if=\"project-read\">\n Is transcluded if user has permission 'read-project' at least in one project.\n </div>\n <div rg-permission-if=\"project-read\" in-global>\n Is transcluded if user has permission 'read-project' at project \"global\".\n </div>\n </file>\n </example>\n *\n * @restrict A\n * @element ANY\n * @requires $animate\n * @requires userPermissions\n */\nangularModule.directive(\n  'rgPermissionIf',\n  function rgPermissionIfDirective($animate, userPermissions, $interpolate) {\n    return {\n      transclude: 'element',\n      priority: 600,\n      terminal: true,\n      restrict: 'A',\n      // disable error about multiple transclude like in ngIf\n      $$tlb: true, // eslint-disable-line angular/no-private-call\n      require: '^?rgSomePermissions',\n      link: function link(scope, iElement, iAttrs, somePermittedCtrl, $transclude) {\n        let block;\n        let childScope;\n\n        const projectId = iAttrs.hasOwnProperty('inGlobal')\n          ? PermissionCache.GLOBAL_PROJECT_ID\n          : scope.$eval(iAttrs.inProject);\n\n        const permission = $interpolate(iAttrs.rgPermissionIf)(scope);\n\n        userPermissions.check(permission, projectId).\n          then(permitted => {\n            if (permitted) {\n              if (!childScope) {\n                childScope = scope.$new();\n                $transclude(childScope, clone => {\n                  block = {\n                    startNode: clone[0],\n                    endNode: clone[clone.length++] = document.\n                      createComment(` end rgPermissionIf: ${iAttrs.rgPermissionIf} `)\n                  };\n                  $animate.enter(clone, iElement.parent(), iElement);\n                });\n              }\n            } else {\n              if (childScope) {\n                childScope.$destroy();\n                childScope = null;\n              }\n\n              if (block) {\n                /* global getBlockElements: false */\n                $animate.leave(getBlockElements(block));\n                block = null;\n              }\n            }\n          }).\n          then(registerPermission(iElement));\n      }\n    };\n  }\n);\n\n/**\n * @ngdoc directive\n * @name rgSomePermissions\n *\n * @description\n * Binds left-value expression with a boolean value that is true when at least one permission of\n * nested {@link permission} or {@link rgPermissionIf} directive is obtained by the logged in user.\n *\n * @example\n <example name=\"rgSomePermissions directive\">\n <file name=\"index.html\">\n <div rg-some-permissions=\"atLeastOneNestedDivIsShown\" ng-show=\"atLeastOneNestedDivIsShown\">\n <div rg-permission-if=\"project-read\" in-project=\"0-0-0-0-0\">\n Is transcluded if user has permission 'read-project' in project 0-0-0-0-0.\n </div>\n <div rg-permission-if=\"project-read\">\n Is transcluded if user has permission 'read-project' at least in one project.\n </div>\n </div>\n </file>\n </example>\n *\n * @scope\n * @restrict A\n * @element ANY\n */\nangularModule.directive('rgSomePermissions', function rgSomePermissionsDirective() {\n  return ({\n    scope: {\n      rgSomePermissions: '='\n    },\n    controller: function controller($scope) {\n      const permissions = [];\n      $scope.rgSomePermissions = false;\n\n      function checkPermissions() {\n        for (let i = permissions.length - 1; i >= 0; i--) {\n          if (permissions[i].permitted) {\n            $scope.rgSomePermissions = true;\n            return;\n          }\n        }\n\n        $scope.rgSomePermissions = false;\n      }\n\n      //noinspection JSPotentiallyInvalidUsageOfThis\n      this.registerPermission = () => {\n        const permission = {permitted: false};\n        permissions.push(permission);\n\n        return permitted => {\n          permission.permitted = permitted;\n          checkPermissions();\n        };\n      };\n    }\n  });\n});\n\nexport default angularModule.name;\n",
  "examples": [
    {
      "url": "examples/permissions-ng/caa66604214badb1569a152039223cb8.html",
      "disableAutoSize": false,
      "files": []
    },
    {
      "name": "rgPermission directive",
      "url": "examples/permissions-ng/rg-permission-directive.html",
      "disableAutoSize": false,
      "files": [
        {
          "type": "html",
          "content": "\n<div rg-permission=\"project-read\" in-project=\"0-0-0-0-0\">\nIs visible if user has permission 'read-project' in project 0-0-0-0-0.\n</div>\n<div rg-permission=\"{{scopeVariableName}}\" in-project=\"0-0-0-0-0\">\nIs visible if user has permission 'read-project' in project 0-0-0-0-0.\n</div>\n<div rg-permission=\"project-read\">\nIs visible if user has permission 'read-project' at least in one project.\n</div>\n<div rg-permission=\"project-read\" in-global>\nIs visible if user has permission 'read-project' at project \"global\".\n</div>\n",
          "showCode": true
        }
      ]
    },
    {
      "name": "rgPermissionIf directive",
      "url": "examples/permissions-ng/rg-permission-if-directive.html",
      "disableAutoSize": false,
      "files": [
        {
          "type": "html",
          "content": "\n<div rg-permission-if=\"project-read\" in-project=\"0-0-0-0-0\">\nIs transcluded if user has permission 'read-project' in project 0-0-0-0-0.\n</div>\n<div rg-permission-if=\"project-read\">\nIs transcluded if user has permission 'read-project' at least in one project.\n</div>\n<div rg-permission-if=\"project-read\" in-global>\nIs transcluded if user has permission 'read-project' at project \"global\".\n</div>\n",
          "showCode": true
        }
      ]
    },
    {
      "name": "rgSomePermissions directive",
      "url": "examples/permissions-ng/rg-some-permissions-directive.html",
      "disableAutoSize": false,
      "files": [
        {
          "type": "html",
          "content": "\n<div rg-some-permissions=\"atLeastOneNestedDivIsShown\" ng-show=\"atLeastOneNestedDivIsShown\">\n<div rg-permission-if=\"project-read\" in-project=\"0-0-0-0-0\">\nIs transcluded if user has permission 'read-project' in project 0-0-0-0-0.\n</div>\n<div rg-permission-if=\"project-read\">\nIs transcluded if user has permission 'read-project' at least in one project.\n</div>\n</div>\n",
          "showCode": true
        }
      ]
    }
  ],
  "attrs": {
    "name": "Permissions Ng",
    "tags": "Ring UI Language",
    "category": "Legacy Angular"
  }
};
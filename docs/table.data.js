window.source = {
  "title": "Table",
  "url": "table.html",
  "type": "js",
  "content": "/**\n * @name Table\n * @category Components\n * @tags Ring UI Language\n * @framework React\n * @extends {ReactComponent}\n * @description Interactive table with selection and keyboard navigation support.\n * @example-file ./table.examples.html\n */\n\nimport 'core-js/modules/es6.array.find';\n\nimport React, {PureComponent} from 'react';\nimport PropTypes from 'prop-types';\nimport classNames from 'classnames';\nimport {arrayMove, sortableContainer} from 'react-sortable-hoc';\n\nimport focusSensorHOC from '../global/focus-sensor-hoc';\nimport getUID from '../global/get-uid';\nimport Shortcuts from '../shortcuts/shortcuts';\nimport Loader from '../loader/loader';\n\nimport Selection from './selection';\nimport Header from './header';\nimport style from './table.css';\nimport DraggableRow from './draggable-row';\nimport selectionShortcutsHOC from './selection-shortcuts-hoc';\nimport disableHoverHOC from './disable-hover-hoc';\n\nconst alwaysFalse = () => false;\n\nconst DraggableRows = sortableContainer(props => {\n  const {\n    data, getItemKey, selection, selectable,\n    isItemSelectable, onRowFocus, onRowSelect,\n    getItemLevel, isItemCollapsible, isItemCollapsed,\n    onItemCollapse, onItemExpand, isDisabledSelectionVisible,\n    getCheckboxTooltip,\n    ...restProps\n  } = props;\n\n  return (\n    <tbody data-test=\"ring-table-body\">\n      {data.map((item, index) => (\n        <DraggableRow\n          key={getItemKey(item)}\n          level={getItemLevel(item)}\n          index={index}\n          item={item}\n          showFocus={selection.isFocused(item)}\n          focused={selection.isFocused(item)}\n          selectable={selectable && isItemSelectable(item)}\n          selected={selectable && selection.isSelected(item)}\n          onFocus={onRowFocus}\n          onSelect={onRowSelect}\n          collapsible={isItemCollapsible(item)}\n          collapsed={isItemCollapsed(item)}\n          onCollapse={onItemCollapse}\n          onExpand={onItemExpand}\n          showDisabledSelection={isDisabledSelectionVisible(item)}\n          checkboxTooltip={getCheckboxTooltip(item)}\n          {...restProps}\n        />\n      ))}\n    </tbody>\n  );\n});\n\n// eslint-disable-next-line react/no-deprecated\nclass Table extends PureComponent {\n  static propTypes = {\n    className: PropTypes.string,\n    loaderClassName: PropTypes.string,\n    data: PropTypes.array.isRequired,\n    columns: PropTypes.array.isRequired,\n    caption: PropTypes.string,\n    isItemSelectable: PropTypes.func,\n    stickyHeader: PropTypes.bool,\n    stickyHeaderOffset: PropTypes.string,\n    loading: PropTypes.bool,\n    getItemKey: PropTypes.func,\n    onSort: PropTypes.func,\n    onReorder: PropTypes.func,\n    sortKey: PropTypes.string,\n    sortOrder: PropTypes.bool,\n    draggable: PropTypes.bool,\n    alwaysShowDragHandle: PropTypes.bool,\n    getItemLevel: PropTypes.func,\n    isItemCollapsible: PropTypes.func,\n    isItemCollapsed: PropTypes.func,\n    onItemCollapse: PropTypes.func,\n    onItemExpand: PropTypes.func,\n    isDisabledSelectionVisible: PropTypes.func,\n    getCheckboxTooltip: PropTypes.func,\n\n    // focusSensorHOC\n    focused: PropTypes.bool,\n    onFocusRestore: PropTypes.func,\n\n    // selectionShortcutsHOC\n    selection: PropTypes.instanceOf(Selection).isRequired,\n    selectable: PropTypes.bool,\n    onSelect: PropTypes.func,\n    shortcutsMap: PropTypes.object,\n\n    // disableHoverHOC\n    disabledHover: PropTypes.bool,\n\n    remoteSelection: PropTypes.bool\n  };\n\n  static defaultProps = {\n    isItemSelectable: () => true,\n    loading: false,\n    onSort: () => {},\n    onReorder: () => {},\n    getItemKey: item => item.id,\n    sortKey: 'id',\n    sortOrder: true,\n    draggable: false,\n    alwaysShowDragHandle: false,\n    stickyHeader: true,\n    getItemLevel: () => 0,\n    isItemCollapsible: () => false,\n    isItemCollapsed: () => false,\n    onItemCollapse: () => {},\n    onItemExpand: () => {},\n    remoteSelection: false,\n    isDisabledSelectionVisible: () => {},\n    getCheckboxTooltip: () => {}\n  };\n\n  state = {\n    shortcutsEnabled: this.props.selectable && this.props.focused,\n    shortcutsScope: getUID('ring-table-'),\n    userSelectNone: false\n  };\n\n  componentDidMount() {\n    document.addEventListener('mouseup', this.onMouseUp);\n  }\n\n  componentWillReceiveProps(nextProps) {\n    const {data, selection, onSelect, selectable} = this.props;\n\n    if (data !== nextProps.data && !this.props.remoteSelection) {\n      onSelect(selection.cloneWith({data: nextProps.data}));\n    }\n\n    if (!nextProps.selectable && nextProps.selectable !== selectable) {\n      onSelect(selection.resetSelection());\n    }\n\n    const shortcutsEnabled = nextProps.focused;\n    if (shortcutsEnabled !== this.state.shortcutsEnabled) {\n      this.setState({shortcutsEnabled});\n    }\n  }\n\n  componentWillUnmount() {\n    document.removeEventListener('mouseup', this.onMouseUp);\n  }\n\n  onMouseDown = e => {\n    if (e.shiftKey) {\n      this.setState({userSelectNone: true});\n    }\n  };\n\n  onMouseUp = () => {\n    if (this.state.userSelectNone) {\n      this.setState({userSelectNone: false});\n    }\n  };\n\n  onRowFocus = row => {\n    const {selection, onSelect} = this.props;\n    onSelect(selection.focus(row));\n  };\n\n  onRowSelect = (row, selected) => {\n    const {selection, onSelect} = this.props;\n    if (selected) {\n      onSelect(selection.select(row));\n    } else {\n      onSelect(selection.deselect(row));\n    }\n  };\n\n  onSortEnd = ({oldIndex, newIndex}) => {\n    const data = arrayMove(this.props.data, oldIndex, newIndex);\n    this.props.onReorder({data, oldIndex, newIndex});\n  };\n\n  onCheckboxChange = e => {\n    const {checked} = e.target;\n    const {selection, onSelect} = this.props;\n\n    if (checked) {\n      onSelect(selection.selectAll());\n    } else {\n      onSelect(selection.reset());\n    }\n\n    this.restoreFocusWithoutScroll();\n  };\n\n  restoreFocusWithoutScroll = () => {\n    const {scrollX, scrollY} = window;\n    this.props.onFocusRestore();\n    window.scrollTo(scrollX, scrollY);\n  };\n\n  render() {\n    const {\n      data, selection, columns, caption, getItemKey, selectable,\n      isItemSelectable, getItemLevel, draggable, alwaysShowDragHandle,\n      loading, onSort, sortKey, sortOrder, loaderClassName, stickyHeader,\n      stickyHeaderOffset, isItemCollapsible, isItemCollapsed,\n      onItemCollapse, onItemExpand, isDisabledSelectionVisible, getCheckboxTooltip\n    } = this.props;\n\n\n    // NOTE: Do not construct new object per render because it causes all rows rerendering\n\n    const headerProps = {\n      caption, selectable, draggable,\n      columns, onSort, sortKey, sortOrder,\n      sticky: stickyHeader,\n      topStickOffset: stickyHeaderOffset\n    };\n\n    const selectedSize = selection.getSelected().size;\n    const allSelectedSize = selection.selectAll().getSelected().size;\n    headerProps.checked = selectedSize > 0 && selectedSize === allSelectedSize;\n    headerProps.onCheckboxChange = this.onCheckboxChange;\n    headerProps.checkboxDisabled = this.props.data.length === 0;\n\n    const wrapperClasses = classNames({\n      [style.tableWrapper]: true,\n      [style.loading]: loading\n    });\n\n    const classes = classNames(this.props.className, {\n      [style.table]: true,\n      [style.multiSelection]: selection.getSelected().size > 0,\n      [style.userSelectNone]: this.state.userSelectNone,\n      [style.disabledHover]: this.props.disabledHover\n    });\n\n    return (\n      <div className={wrapperClasses} data-test=\"ring-table-wrapper\">\n        {this.state.shortcutsEnabled &&\n          (\n            <Shortcuts\n              map={this.props.shortcutsMap}\n              scope={this.state.shortcutsScope}\n            />\n          )\n        }\n\n        <table className={classes} onMouseDown={this.onMouseDown} data-test=\"ring-table\">\n          <Header {...headerProps}/>\n          <DraggableRows\n            /* Sortable props */\n            useDragHandle\n            disabled={!draggable}\n            helperClass={style.draggingRow}\n            onSortEnd={this.onSortEnd}\n            getItemKey={getItemKey}\n            shouldCancelStart={alwaysFalse}\n\n            /* Row props */\n            draggable={draggable}\n            alwaysShowDragHandle={alwaysShowDragHandle}\n            data={data}\n            columns={columns}\n            selectable={selectable}\n            isItemSelectable={isItemSelectable}\n            selection={selection}\n            onRowFocus={this.onRowFocus}\n            onRowSelect={this.onRowSelect}\n            getItemLevel={getItemLevel}\n            isItemCollapsible={isItemCollapsible}\n            isItemCollapsed={isItemCollapsed}\n            onItemCollapse={onItemCollapse}\n            onItemExpand={onItemExpand}\n            isDisabledSelectionVisible={isDisabledSelectionVisible}\n            getCheckboxTooltip={getCheckboxTooltip}\n          />\n        </table>\n\n        {loading && (\n          <div className={style.loadingOverlay}>\n            <Loader className={loaderClassName}/>\n          </div>\n        )}\n      </div>\n    );\n  }\n}\n\nexport default disableHoverHOC(selectionShortcutsHOC(focusSensorHOC(Table)));\n",
  "examples": [
    {
      "name": "Table",
      "url": "examples/table/table.html",
      "disableAutoSize": true,
      "files": [
        {
          "type": "html",
          "content": "\n<div id=\"demo\"></div>\n  ",
          "showCode": true
        },
        {
          "type": "css",
          "content": "\nbody {\n  margin: 0;\n  padding: 0;\n}\n  ",
          "showCode": true
        },
        {
          "type": "js",
          "content": "\nimport React, {Component, createElement} from 'react';\nimport {render} from 'react-dom';\nimport Table, {THEMES} from '@jetbrains/ring-ui/components/table/table';\nimport Selection from '@jetbrains/ring-ui/components/table/selection';\nimport {Grid, Row, Col} from '@jetbrains/ring-ui/components/grid/grid';\nimport Link from '@jetbrains/ring-ui/components/link/link';\nimport Pager from '@jetbrains/ring-ui/components/pager/pager';\nimport Button from '@jetbrains/ring-ui/components/button/button';\nimport mock from '@jetbrains/ring-ui/components/table/table.examples.json';\n\nconst pageSize = 7;\nconst total = mock.length;\n\nclass Example extends Component {\n  state = {\n    data: [],\n    selection: new Selection(),\n    caption: undefined,\n    selectable: true,\n    draggable: true,\n    page: 1,\n    pageSize,\n    total,\n    sortKey: 'country',\n    sortOrder: true,\n    loading: false\n  }\n\n  columns = [\n    {\n      id: 'country',\n      title: 'Country',\n      sortable: true\n    },\n\n    {\n      id: 'id',\n      title: 'ID',\n      rightAlign: true\n    },\n\n    {\n      id: 'city',\n      title: 'City',\n      sortable: true\n    },\n\n    {\n      id: 'url',\n      title: 'URL',\n      getValue: ({url}) => <Link href={url}>{url}</Link>\n    }\n  ]\n\n  onSort = ({column: {id: sortKey}, order: sortOrder}) => {\n    this.setState({sortKey, sortOrder});\n  }\n\n  onPageChange = page => {\n    this.setState({page});\n  }\n\n  componentWillMount() {\n    this.loadPage();\n  }\n\n  componentDidUpdate(prevProps, prevState) {\n    const {page, sortKey, sortOrder} = this.state;\n    if (page !== prevState.page || sortKey !== prevState.sortKey || sortOrder !== prevState.sortOrder) {\n      this.loadPage();\n    }\n  }\n\n  isItemSelectable(item) {\n    return item.id !== 14;\n  }\n\n  loadPage = () => {\n    const {page, pageSize, sortKey, sortOrder} = this.state;\n\n    let data = [...mock];\n    data.sort((a, b) => a[sortKey].localeCompare(b[sortKey]) * (sortOrder ? 1 : -1));\n    data = data.slice((page - 1) * pageSize, (page - 1) * pageSize + pageSize);\n\n    const selection = new Selection({data, isItemSelectable: this.isItemSelectable});\n\n    this.setState({data, selection});\n  }\n\n  render() {\n    const {data, caption, selectable, draggable,  loading, page, pageSize, total, selection, sortKey, sortOrder} = this.state;\n\n    return (\n      <div>\n        <Table\n          data={data}\n          columns={this.columns}\n          selection={selection}\n          onSelect={selection => this.setState({selection})}\n          onReorder={({data}) => this.setState({data})}\n          loading={loading}\n          onSort={this.onSort}\n          sortKey={sortKey}\n          sortOrder={sortOrder}\n          caption={caption}\n          selectable={selectable}\n          isItemSelectable={this.isItemSelectable}\n          draggable={draggable}\n          autofocus\n        />\n\n        <Grid>\n          <Row>\n            <Col>\n              <Pager\n                total={total}\n                pageSize={pageSize}\n                currentPage={page}\n                disablePageSizeSelector\n                onPageChange={this.onPageChange}\n              />\n            </Col>\n          </Row>\n\n          <Row>\n            <Col>Active items: {[...selection.getActive()].map(item => item.country).join(', ')}</Col>\n          </Row>\n\n          <Row>\n            <Col>\n              <Button onClick={() => this.setState({data: [...this.state.data]}) }>Recreate data array</Button>\n              {\" \"}\n              <span id=\"button-non-selectable\">\n              {\n                selectable\n                ? <Button onClick={() => this.setState({selectable: false})}>Non-selectable</Button>\n                : <Button onClick={() => this.setState({selectable: true})}>Selectable</Button>\n              }\n              </span>\n\n              {\" \"}\n              {  draggable\n                ? <Button onClick={() => this.setState({draggable: false})}>Non-draggable</Button>\n                : <Button onClick={() => this.setState({draggable: true})}>Draggable</Button>\n              }\n              {\" \"}\n\n              <span id=\"button-with-a-caption\">\n              {\" \"}\n              {\n                caption\n                ? <Button onClick={() => this.setState({caption: undefined})}>Without a caption</Button>\n                : <Button onClick={() => this.setState({caption: 'Countries'})}>With a caption</Button>\n              }\n              {\" \"}\n              </span>\n              {\" \"}\n\n              {\n                loading\n                ? <Button onClick={() => this.setState({loading: false})}>Not loading</Button>\n                : <Button onClick={() => this.setState({loading: true})}>Loading</Button>\n              }\n            </Col>\n          </Row>\n\n          {page === 1 && data.length > 5 && <Row>\n            <Col>\n            <span id=\"button-select-bulgaria\">{\n              selection.isSelected(data[3])\n              ? <Button onClick={() => this.setState({selection: selection.deselect(data[3])})}>Deselect {data[3].country}</Button>\n              : <Button onClick={() => this.setState({selection: selection.select(data[3])})}>Select {data[3].country}</Button>\n            }\n            </span>\n\n              <span id=\"button-select-finland\">{\" \"}\n              {selection.isSelected(data[5])\n              ? <Button onClick={() => this.setState({selection: selection.deselect(data[5])})}>Deselect {data[5].country}</Button>\n              : <Button onClick={() => this.setState({selection: selection.select(data[5])})}>Select {data[5].country}</Button>\n            }</span>\n            </Col>\n          </Row>}\n        </Grid>\n      </div>\n    );\n  }\n}\n\nrender(createElement(Example, {}), document.getElementById('demo'));\n  ",
          "showCode": true
        }
      ]
    },
    {
      "name": "MultiTable",
      "url": "examples/table/multi-table.html",
      "disableAutoSize": false,
      "files": [
        {
          "type": "html",
          "content": "\n<div id=\"demo\"></div>\n  ",
          "showCode": true
        },
        {
          "type": "css",
          "content": "\nbody {\n  margin: 0;\n  padding: 0;\n}\n  ",
          "showCode": true
        },
        {
          "type": "js",
          "content": "\nimport React, {Component, createElement} from 'react';\nimport {render} from 'react-dom';\nimport MultiTable from '@jetbrains/ring-ui/components/table/multitable';\nimport Table from '@jetbrains/ring-ui/components/table/table';\nimport mock from '@jetbrains/ring-ui/components/table/table.examples2.json';\nimport Selection from '@jetbrains/ring-ui/components/table/selection';\n\nconst data1 = mock.continents;\nconst data2 = mock.countries;\n\nclass Example extends Component {\n  state = {\n    selection1: new Selection({data: data1}),\n    selection2: new Selection({data: data2})\n  };\n\n  columns1 = [\n    {\n      id: 'continent',\n      title: 'Continent'\n    },\n    {\n      id: 'url',\n      title: 'URL'\n    }\n  ]\n\n  columns2 = [\n    {\n      id: 'country',\n      title: 'Country'\n    },\n    {\n      id: 'city',\n      title: 'City'\n    },\n    {\n      id: 'url',\n      title: 'URL'\n    }\n  ]\n\n  render() {\n    return (\n      <MultiTable>\n        <Table\n          data={data1}\n          columns={this.columns1}\n          caption=\"Continents\"\n          selection={this.state.selection1}\n          onSelect={selection => this.setState({selection1: selection})}\n        />\n\n        <Table\n          data={data2}\n          columns={this.columns2}\n          caption=\"Countries\"\n          autofocus\n          selection={this.state.selection2}\n          onSelect={selection => this.setState({selection2: selection})}\n        />\n      </MultiTable>\n    );\n  }\n}\n\nrender(createElement(Example, {}), document.getElementById('demo'));\n  ",
          "showCode": true
        }
      ]
    }
  ],
  "description": "Interactive table with selection and keyboard navigation support.",
  "attrs": {
    "name": "Table",
    "category": "Components",
    "tags": "Ring UI Language",
    "framework": "React",
    "extends": "{ReactComponent}",
    "description": "Interactive table with selection and keyboard navigation support.",
    "example-file": "./table.examples.html"
  }
};
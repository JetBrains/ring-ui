window.source = {
  "title": "Dialog",
  "url": "dialog.html",
  "type": "js",
  "content": "import React, {PureComponent} from 'react';\nimport {createPortal} from 'react-dom';\nimport PropTypes from 'prop-types';\nimport classNames from 'classnames';\n\nimport {AdaptiveIsland} from '../island/island';\nimport getUID from '../global/get-uid';\nimport {CloseIcon} from '../icon/icons';\nimport Shortcuts from '../shortcuts/shortcuts';\nimport TabTrap from '../tab-trap/tab-trap';\nimport Button from '../button/button';\n\nimport ScrollPreventer from './dialog__body-scroll-preventer';\nimport styles from './dialog.css';\n\n/**\n * @name Dialog\n * @category Components\n * @tags Ring UI Language\n * @framework React\n * @constructor\n * @description The Dialog component is a simple way to present content above an enclosing view.\n * @example-file ./dialog.examples.html\n */\n\nfunction noop() {}\n\nexport default class Dialog extends PureComponent {\n  static propTypes = {\n    className: PropTypes.string,\n    contentClassName: PropTypes.string,\n    children: PropTypes.oneOfType([\n      PropTypes.arrayOf(PropTypes.node),\n      PropTypes.node\n    ]),\n    show: PropTypes.bool.isRequired,\n    showCloseButton: PropTypes.bool,\n    onOverlayClick: PropTypes.func,\n    onEscPress: PropTypes.func,\n    onCloseClick: PropTypes.func,\n    // onCloseAttempt is a common callback for ESC pressing and overlay clicking.\n    // Use it if you don't need different behaviors for this cases.\n    onCloseAttempt: PropTypes.func,\n    // focusTrap may break popups inside dialog, so use it carefully\n    trapFocus: PropTypes.bool,\n    autoFocusFirst: PropTypes.bool\n  };\n\n  static defaultProps = {\n    onOverlayClick: noop,\n    onEscPress: noop,\n    onCloseClick: noop,\n    onCloseAttempt: noop,\n    showCloseButton: false,\n    trapFocus: false,\n    autoFocusFirst: true\n  };\n\n  state = {\n    shortcutsScope: getUID('ring-dialog-')\n  };\n\n  componentDidMount() {\n    this.toggleScrollPreventer();\n  }\n\n  componentDidUpdate(prevProps) {\n    if (prevProps.show !== this.props.show) {\n      this.toggleScrollPreventer();\n    }\n  }\n\n  componentWillUnmount() {\n    ScrollPreventer.reset();\n  }\n\n  toggleScrollPreventer() {\n    if (this.props.show) {\n      ScrollPreventer.prevent();\n    } else {\n      ScrollPreventer.reset();\n    }\n  }\n\n  handleClick = event => {\n    if (event.target !== this.dialog) {\n      return;\n    }\n    this.props.onOverlayClick(event);\n    this.props.onCloseAttempt(event);\n  };\n\n  onCloseClick = event => {\n    this.props.onCloseClick(event);\n    this.props.onCloseAttempt(event);\n  };\n\n  getShortcutsMap = () => {\n    const onEscape = event => {\n      if (this.props.show) {\n        this.props.onEscPress(event);\n        this.props.onCloseAttempt(event);\n      }\n    };\n\n    return {\n      esc: onEscape\n    };\n  };\n\n  dialogRef = tabTrap => {\n    this.dialog = tabTrap && tabTrap.node;\n  };\n\n  render() {\n    // eslint-disable-next-line no-unused-vars, max-len\n    const {show, showCloseButton, onOverlayClick, onCloseAttempt, onEscPress, onCloseClick, children, className, contentClassName, trapFocus, ...restProps} = this.props;\n    const classes = classNames(styles.container, className, {\n      [styles.clickableOverlay]: onOverlayClick !== noop || onCloseAttempt !== noop\n    });\n    const shortcutsMap = this.getShortcutsMap();\n\n    return show && createPortal(\n      <TabTrap\n        trapDisabled={!trapFocus}\n        data-test=\"ring-dialog-container\"\n        ref={this.dialogRef}\n        className={classes}\n        onClick={this.handleClick}\n        {...restProps}\n      >\n        <Shortcuts\n          map={shortcutsMap}\n          scope={this.state.shortcutsScope}\n        />\n        <AdaptiveIsland\n          className={classNames(styles.content, contentClassName)}\n          data-test=\"ring-dialog\"\n        >\n          {children}\n          {showCloseButton &&\n            (\n              <Button\n                icon={CloseIcon}\n                iconSize={CloseIcon.Size.Size24}\n                data-test=\"ring-dialog-close-button\"\n                className={styles.closeButton}\n                iconClassName={styles.closeIcon}\n                onClick={this.onCloseClick}\n              />\n            )\n          }\n        </AdaptiveIsland>\n      </TabTrap>,\n      document.body\n    );\n  }\n}\n",
  "examples": [
    {
      "name": "Dialog",
      "url": "examples/dialog/dialog.html",
      "disableAutoSize": true,
      "files": [
        {
          "type": "html",
          "content": "\n<div class=\"long-page\">\n\n  <div id=\"dialog\"></div>\n</div>\n  ",
          "showCode": true
        },
        {
          "type": "css",
          "content": "\n:global(.long-page) {\n  height: 2000px;\n}\n  ",
          "showCode": true
        },
        {
          "type": "js",
          "content": "\nimport {render} from 'react-dom';\nimport React from 'react';\n\nimport Dialog from '@jetbrains/ring-ui/components/dialog/dialog';\nimport {Header, Content} from '@jetbrains/ring-ui/components/island/island';\nimport Button from '@jetbrains/ring-ui/components/button/button';\nimport Input from '@jetbrains/ring-ui/components/input/input';\nimport Group from '@jetbrains/ring-ui/components/group/group';\nimport Toggle from '@jetbrains/ring-ui/components/toggle/toggle';\nimport Panel from '@jetbrains/ring-ui/components/panel/panel';\n\nclass DialogDemo extends React.Component {\n  state = {\n    show: true,\n    text: \"\",\n    autoFocusEnabled: true\n  };\n\n  doAction = () => {\n    alert(`${this.state.text} performed`);\n    this.setState({show: false});\n  }\n\n  cancelDialog = () => {\n    this.setState({show: false});\n  }\n\n  render() {\n    const {show, text, autoFocusEnabled} = this.state;\n    return (\n      <div>\n        <Group>\n          <Button onClick={() => this.setState({show: true})}>Show dialog</Button>\n          <Toggle\n            checked={this.state.autoFocusEnabled}\n            onChange={() => this.setState({autoFocusEnabled: !autoFocusEnabled})}\n          >Autofocus</Toggle>\n        </Group>\n\n        <Dialog\n          show={show}\n          onCloseAttempt={this.cancelDialog}\n          trapFocus\n          autoFocusFirst={autoFocusEnabled}\n          showCloseButton\n        >\n          <Header>Dialog title</Header>\n          <Content>\n            <Input\n              label=\"Enter action name\"\n              value={text}\n              onChange={e => this.setState({text: e.target.value})}\n            />\n          </Content>\n          <Panel>\n            <Button primary onClick={this.doAction}>OK</Button>\n            <Button onClick={this.cancelDialog}>Cancel</Button>\n          </Panel>\n        </Dialog>\n\n      </div>\n    );\n  }\n}\n\nrender(<DialogDemo />, document.getElementById('dialog'));\n  ",
          "showCode": true
        }
      ]
    },
    {
      "name": "Dialog with scroll",
      "url": "examples/dialog/dialog-with-scroll.html",
      "disableAutoSize": true,
      "files": [
        {
          "type": "html",
          "content": "\n<div>\n  <div id=\"dialog\"></div>\n</div>\n  ",
          "showCode": true
        },
        {
          "type": "js",
          "content": "\nimport {render} from 'react-dom';\nimport React from 'react';\n\nimport Dialog from '@jetbrains/ring-ui/components/dialog/dialog';\nimport {Header, Content} from '@jetbrains/ring-ui/components/island/island';\nimport Button from '@jetbrains/ring-ui/components/button/button';\nimport Panel from '@jetbrains/ring-ui/components/panel/panel';\n\nclass DialogDemo extends React.Component {\n  state = {\n    show: true\n  };\n\n  doAction = () => {\n    alert('action performed');\n    this.setState({show: false});\n  }\n\n  cancelDialog = () => {\n    this.setState({show: false});\n  }\n\n  render() {\n    return (\n      <div>\n        <div>\n          <Button onClick={() => this.setState({show: true})}>Show dialog</Button>\n        </div>\n\n        <Dialog show={this.state.show} onCloseAttempt={this.cancelDialog} trapFocus\n                showCloseButton>\n          <Header>Dialog title</Header>\n          <Content>\n            <div>\n              <p>Dialog content (scrollable)</p>\n              <p>Lorem Ipsum is simply dummy text of the printing and typesetting\n                industry. Lorem Ipsum has been the industry's standard dummy text ever\n                since the 1500s, when an unknown printer took a galley of type and\n                scrambled it to make a type specimen book. It has survived not only five\n                centuries, but also the leap into electronic typesetting, remaining\n                essentially unchanged.</p>\n              <p>Lorem Ipsum is simply dummy text of the printing and typesetting\n                industry. Lorem Ipsum has been the industry's standard dummy text ever\n                since the 1500s, when an unknown printer took a galley of type and\n                scrambled it to make a type specimen book. It has survived not only five\n                centuries, but also the leap into electronic typesetting, remaining\n                essentially unchanged.</p>\n              <p>Lorem Ipsum is simply dummy text of the printing and typesetting\n                industry. Lorem Ipsum has been the industry's standard dummy text ever\n                since the 1500s, when an unknown printer took a galley of type and\n                scrambled it to make a type specimen book. It has survived not only five\n                centuries, but also the leap into electronic typesetting, remaining\n                essentially unchanged.</p>\n              <p>Lorem Ipsum is simply dummy text of the printing and typesetting\n                industry. Lorem Ipsum has been the industry's standard dummy text ever\n                since the 1500s, when an unknown printer took a galley of type and\n                scrambled it to make a type specimen book. It has survived not only five\n                centuries, but also the leap into electronic typesetting, remaining\n                essentially unchanged.</p>\n              <p>Lorem Ipsum is simply dummy text of the printing and typesetting\n                industry. Lorem Ipsum has been the industry's standard dummy text ever\n                since the 1500s, when an unknown printer took a galley of type and\n                scrambled it to make a type specimen book. It has survived not only five\n                centuries, but also the leap into electronic typesetting, remaining\n                essentially unchanged.</p>\n              <p>Lorem Ipsum is simply dummy text of the printing and typesetting\n                industry. Lorem Ipsum has been the industry's standard dummy text ever\n                since the 1500s, when an unknown printer took a galley of type and\n                scrambled it to make a type specimen book. It has survived not only five\n                centuries, but also the leap into electronic typesetting, remaining\n                essentially unchanged.</p>\n              <p>Lorem Ipsum is simply dummy text of the printing and typesetting\n                industry. Lorem Ipsum has been the industry's standard dummy text ever\n                since the 1500s, when an unknown printer took a galley of type and\n                scrambled it to make a type specimen book. It has survived not only five\n                centuries, but also the leap into electronic typesetting, remaining\n                essentially unchanged.</p>\n            </div>\n          </Content>\n          <Panel>\n            <Button primary onClick={this.doAction}>OK</Button>\n            <Button onClick={this.cancelDialog}>Cancel</Button>\n          </Panel>\n        </Dialog>\n\n      </div>\n    );\n  }\n}\n\nrender(<DialogDemo />, document.getElementById('dialog'));\n  ",
          "showCode": true
        }
      ]
    }
  ],
  "description": "The Dialog component is a simple way to present content above an enclosing view.",
  "attrs": {
    "name": "Dialog",
    "category": "Components",
    "tags": "Ring UI Language",
    "framework": "React",
    "constructor": "",
    "description": "The Dialog component is a simple way to present content above an enclosing view.",
    "example-file": "./dialog.examples.html"
  }
};
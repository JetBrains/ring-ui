window.source = {
  "title": "Dialog Ng",
  "url": "dialog-ng.html",
  "type": "js",
  "content": "import angular from 'angular';\nimport 'dom4';\nimport createFocusTrap from 'focus-trap';\n\nimport {getRect, getStyles} from '../global/dom';\nimport RingAngularComponent from '../global/ring-angular-component';\nimport shortcuts from '../shortcuts/core';\nimport RingButton from '../button-ng/button-ng';\nimport PromisedClickNg from '../promised-click-ng/promised-click-ng';\nimport rgCompilerModuleName from '../compiler-ng/compiler-ng';\nimport ScrollPreventer from '../dialog/dialog__body-scroll-preventer';\nimport '../form/form.scss';\nimport dialogStyles from '../dialog/dialog.css';\nimport islandStyles from '../island/island.css';\n\nimport styles from './dialog-ng.css';\n\n/**\n * @name Dialog Ng\n * @category Legacy Angular\n * @tags Ring UI Language\n * @description Provides an Angular wrapper for Dialog.\n * @example-file ./dialog-ng.examples.html\n */\n\nconst angularModule = angular.module(\n  'Ring.dialog',\n  [RingButton, PromisedClickNg, rgCompilerModuleName]\n);\n\nclass DialogController extends RingAngularComponent {\n  static $inject = ['$scope', '$q', 'dialog', '$element', 'dialogInSidebar', '$compile',\n    '$injector', '$controller', 'rgCompiler'];\n\n  constructor(...args) {\n    super(...args);\n\n    this.styles = styles;\n    this.dialogStyles = dialogStyles;\n    this.islandStyles = islandStyles;\n\n    this.$inject.$q((resolve, reject) => {\n      this.resolve = resolve;\n      this.reject = reject;\n    });\n  }\n\n  $onInit() {\n    const {dialog, dialogInSidebar, $scope} = this.$inject;\n    const dialogService = this.inSidebar ? dialogInSidebar : dialog;\n    this.focusTrap = createFocusTrap(this.$inject.$element[0], {\n      fallbackFocus: '[data-anchor=\"focus-trap-fallback\"]',\n      escapeDeactivates: false\n    });\n\n    this.dialogService = dialogService;\n    this.previousBodyWidth = null;\n\n    $scope.$on('$routeChangeSuccess', this.hide);\n    $scope.$on('$routeUpdate', this.hide);\n    $scope.$on('$destroy', dialogService.unregister);\n\n    $scope.$watch(() => this.active, () => {\n      if (this.active) {\n        shortcuts.bindMap(this.getShortcuts(), {\n          scope: this.DIALOG_NAMESPACE\n        });\n      } else {\n        this.reset();\n      }\n    });\n\n    dialogService.register(this);\n  }\n\n  getShortcuts() {\n    const defaultEscHandler = function escHandler() {\n      this.active = false;\n      this.focusTrap.deactivate();\n      this.$inject.$scope.$apply();\n    }.bind(this);\n\n    const dialogShortcuts = {\n      esc: defaultEscHandler,\n      enter: this.applyDefaultHandler(false),\n      'mod+enter': this.applyDefaultHandler(true)\n    };\n\n    angular.extend(dialogShortcuts, this.shortcuts);\n\n    if (this.shortcuts && this.shortcuts.esc) {\n      /**\n       * Merge ESC handler\n       * @type {Function} {dialogShortcuts.esc}\n       */\n      const customHandler = dialogShortcuts.esc;\n      dialogShortcuts.esc = () => {\n        const result = customHandler();\n        defaultEscHandler();\n        return result;\n      };\n    }\n\n    return dialogShortcuts;\n  }\n\n  handleClick(event) {\n    const isOverlayClicked = event.target === event.currentTarget;\n    if (this.inSidebar || !this.closeOnClick || !isOverlayClicked) {\n      return;\n    }\n    this.hide();\n  }\n\n  setTitle(title) {\n    this.title = title;\n  }\n\n  compileTemplate() {\n    if (this.config.data) {\n      const element = angular.element(this.template);\n\n      return {\n        element,\n        link: this.$inject.$compile(element)\n      };\n    }\n\n    return this.$inject.rgCompiler(this.config).catch(error => {\n      this.reject(error);\n      return this.$inject.$q.reject(error);\n    });\n  }\n\n  show(config) {\n    const {$q, $scope} = this.$inject;\n\n    if (!this.inSidebar) {\n      ScrollPreventer.prevent();\n      if (config && config.trapFocus === true) {\n        this.focusTrap.activate();\n      }\n    }\n\n    if (this.active) {\n      this.reset();\n    }\n\n    // Clear dialog errors\n    this.error = null;\n    if (this.dialogForm) {\n      this.dialogForm.$setPristine();\n    }\n\n    if (config) {\n      this.title = config.title;\n      this.buttons = config.buttons;\n      this.data = config.data || {};\n      this.wideDialog = config.wideDialog;\n      this.autoWidth = config.autoWidth;\n      this.scrollableWrapperClassName = config.scrollableWrapperClassName;\n      this.cssClass = config.cssClass || '';\n\n      this.shortcuts = config.shortcuts;\n\n      this.content = config.content;\n      this.template = config.template;\n\n      this.config = config;\n\n      this.description = config.description && config.description.split('\\n') || [];\n      this.closeOnClick = config.closeOnClick;\n\n      // Backward compatibility with existing templates which use data directly from scope\n      $scope.data = this.data;\n    }\n\n    this.currentShortcutsScope = shortcuts.getScope();\n    this.DIALOG_NAMESPACE = this.dialogService.DIALOG_NAMESPACE;\n    shortcuts.setScope(this.dialogService.DIALOG_NAMESPACE);\n\n    this.active = true;\n\n    $scope.$broadcast('dialog.show');\n\n    return $q((resolve, reject) => {\n      this.resolve = resolve;\n      this.reject = reject;\n    });\n  }\n\n  update(config = {}) {\n    Object.assign(this.data, config.data);\n    Object.assign(this.buttons, config.buttons);\n\n  }\n\n  hide = () => {\n    if (!this.inSidebar) {\n      ScrollPreventer.reset();\n    }\n\n    this.active = false;\n    this.content = '';\n    this.focusTrap.deactivate();\n\n    Reflect.deleteProperty(this, 'DIALOG_NAMESPACE');\n\n    if (shortcuts.indexOfScope(this.dialogService.DIALOG_NAMESPACE) > -1) {\n      shortcuts.setScope(this.currentShortcutsScope);\n    }\n\n    this._resetFormState();\n    this.$inject.$scope.$broadcast('dialog.hide');\n  };\n\n  _resetFormState() {\n    const dialogForm = this.dialogForm;\n    if (!dialogForm) {\n      return;\n    }\n\n    dialogForm.$setPristine();\n    dialogForm.$setUntouched();\n    dialogForm.$valid = true;\n    dialogForm.$invalid = false;\n    dialogForm.$error = {};\n  }\n\n  done(result) {\n    this.resetPosition();\n    this.resolve(result);\n    this.hide();\n  }\n\n  reset(result) {\n    this.done(result);\n  }\n\n  getErrorMessage(errorResponse) {\n    if (errorResponse && errorResponse.data && errorResponse.data.error_description) {\n      return errorResponse.data.error_description;\n    }\n\n    return errorResponse;\n  }\n\n  getFieldErrorMessage(errorResponse) {\n    if (errorResponse && errorResponse.data && errorResponse.data.error) {\n      return errorResponse.data.error;\n    }\n\n    return null;\n  }\n\n  serverErrorFields = [];\n\n  action(button) {\n    if (button.inProgress) {\n      return undefined;\n    }\n\n    const errorReporter = errorResponse => {\n      const errorField = errorResponse && errorResponse.data && errorResponse.data.error_field;\n\n      if (errorField && this.dialogForm[errorField]) {\n        this.dialogForm[errorField].$invalid = true;\n        this.dialogForm[errorField].$error[errorField] = [{\n          message: this.getFieldErrorMessage(errorResponse)\n        }];\n        this.serverErrorFields.push(errorField);\n      } else {\n        this.error = this.getErrorMessage(errorResponse);\n      }\n    };\n\n    if (button.action) {\n      if (!button.keepServerErrors) {\n        this.serverErrorFields.forEach(errorField => {\n          this.dialogForm[errorField].$invalid = false;\n          this.dialogForm[errorField].$error = {};\n        });\n        this.serverErrorFields = [];\n      }\n\n      const actionResult =\n        button.action(this.data, button, errorReporter, this.dialogForm, this.buttons);\n\n      button.inProgress = true;\n\n      return this.$inject.$q.resolve(actionResult).\n        then(res => {\n          const dontClose = res === false;\n\n          if (!dontClose && (button.close !== false)) {\n            this.done(res);\n          }\n        }).\n        catch(errorReporter).\n        finally(() => {\n          button.inProgress = false;\n        });\n    } else if (button.close !== false) {\n      this.reset(false);\n    }\n\n    return undefined;\n  }\n\n  applyDefaultHandler(isTextAreaShortcut) {\n    return event => {\n      if (\n        event.target.matches('textarea') !== isTextAreaShortcut ||\n        event.target.matches('button')\n      ) {\n        return;\n      }\n\n      event.stopPropagation();\n      event.preventDefault();\n\n      if (this.dialogForm.$valid && this.buttons) {\n        for (const button of this.buttons) {\n          if (button.default && !button.hidden && !button.disabled) {\n            this.action(button);\n            this.$inject.$scope.$apply();\n            return;\n          }\n        }\n      }\n    };\n  }\n}\n\nclass DialogService extends RingAngularComponent {\n  static $inject = ['$log'];\n\n  DIALOG_NAMESPACE = 'ring-dialog';\n  fallbackDialog = null;\n\n  constructor(...constrArgs) {\n    super(...constrArgs);\n\n    // Binding proxy methods to a service instance\n    ['show', 'hide', 'update', 'done', 'reset'].forEach(key => {\n      this[key] = function methodWrapper(...args) {\n        if (this.ctrl) {\n          return this.ctrl[key](...args);\n        } else if (this.fallbackDialog) {\n          return this.fallbackDialog[key](...args);\n        } else {\n          this.$inject.$log.error('No dialog directive is found');\n          return undefined;\n        }\n      }.bind(this);\n    });\n  }\n\n  register(ctrl) {\n    this.ctrl = ctrl;\n  }\n\n  unregister = () => {\n    Reflect.deleteProperty(this, 'ctrl');\n  }\n}\n\nclass DialogInSidebarService extends DialogService {\n  static $inject = [...DialogService.$inject, 'dialog'];\n\n  DIALOG_NAMESPACE = 'ring-dialog-in-sidebar';\n\n  constructor(...args) {\n    super(...args);\n    this.fallbackDialog = this.$inject.dialog;\n  }\n}\n\nfunction rgDialogDirective($timeout) {\n  function link(scope, iElement, iAttrs, dialogCtrl) {\n    const node = iElement[0];\n    const dialogContainer = node.querySelector('*[data-anchor=dialog-container]');\n    const dialogHeader = node.querySelector('*[data-anchor=dialog-header]');\n    const dialogCustomFooter = node.querySelector('*[data-anchor=dialog-custom-footer-container]');\n\n    // Left for backward compatibility with existing templates that use data directly from scope\n    scope.dialogForm = dialogCtrl.dialogForm;\n\n    function setPosition(top, left) {\n      Object.assign(dialogContainer.style, {\n        top: `${top}px`,\n        left: `${left}px`\n      });\n    }\n\n    // Focus first input\n    function focusFirst() {\n      const controls = node.queryAll('input,select,button,textarea,*[contentEditable=true]').\n        filter(inputNode => getStyles(inputNode).display !== 'none');\n      if (controls.length) {\n        controls[0].focus();\n      }\n    }\n\n    function onMousemove(e) {\n      e.preventDefault();\n\n      const pageHeight = window.innerHeight;\n      const pageWidth = window.innerWidth;\n      const clearance = 10;\n      const maxTop = pageHeight - clearance;\n      const maxLeft = pageWidth - clearance;\n\n      const newTop = getRect(dialogHeader).top + e.movementY;\n      const newLeft = getRect(dialogHeader).left + e.movementX;\n\n      if (newTop > maxTop || newTop < clearance) {\n        return;\n      }\n\n      if (newLeft > maxLeft || newLeft < clearance) {\n        return;\n      }\n\n      const offsetY = parseFloat(dialogContainer.style.top) || 0;\n      const offsetX = parseFloat(dialogContainer.style.left) || 0;\n      setPosition(offsetY + e.movementY, offsetX + e.movementX);\n    }\n\n    function onMouseup() {\n      document.removeEventListener('mousemove', onMousemove);\n      document.removeEventListener('mouseup', onMouseup);\n    }\n\n    function onMousedown() {\n      if (!dialogCtrl.inSidebar) {\n        // Duct tape for all Ring 1.0 dropdown components inside\n        node.dispatchEvent(new CustomEvent('ring.popup-close'));\n\n        document.addEventListener('mousemove', onMousemove);\n        document.addEventListener('mouseup', onMouseup);\n      }\n    }\n\n    function onFocusin(e) {\n      if (!node.contains(e.target) && e.target.classList.contains('ring-popup')) {\n        e.preventDefault();\n        focusFirst();\n      }\n    }\n\n    function setCustomFooter(customFooterElem) {\n      const placeholder = angular.element(dialogCustomFooter);\n      const footer = angular.element(`<div class=\"${this.styles.footer}\"></div>`).append(customFooterElem);\n      placeholder.empty();\n      placeholder.append(footer);\n    }\n\n    dialogCtrl.resetPosition = () => dialogContainer.removeAttribute('style');\n    dialogCtrl.setCustomFooter = setCustomFooter;\n\n    dialogHeader.addEventListener('mousedown', onMousedown);\n    document.addEventListener('focusin', onFocusin);\n    scope.$on('rgDialogContentLoaded', () => $timeout(focusFirst));\n\n    // Backward compatibility for youtrack (if they are using \"content\" property)\n    // which is actually ng-include with $includeContentLoaded event in the end\n    scope.$on('$includeContentLoaded', () => $timeout(focusFirst));\n\n    scope.$on('dialog.hide', () => {\n      angular.element(dialogCustomFooter).empty();\n    });\n\n    scope.$on('$destroy', () => {\n      dialogHeader.removeEventListener('mousedown', onMousedown);\n      document.removeEventListener('mousemove', onMousemove);\n      document.removeEventListener('mouseup', onMouseup);\n      document.removeEventListener('focusin', onFocusin);\n      window.removeEventListener('resize', setPosition);\n    });\n  }\n\n  return {\n    scope: {},\n    controller: DialogController,\n    bindToController: {\n      inSidebar: '@?',\n      active: '=?'\n    },\n    replace: true,\n    template: require('./dialog-ng.html'),\n    controllerAs: 'dialog',\n    link\n  };\n}\n\nfunction rgDialogTitleDirective() {\n  function link(scope, iElement, iAttrs, dialogCtrl) {\n    dialogCtrl.setTitle(scope.title);\n  }\n\n  return {\n    scope: {\n      title: '@rgDialogTitle'\n    },\n    require: '^rgDialog',\n    link\n  };\n}\n\nfunction rgDialogFooterDirective() {\n  function link(scope, iElement, iAttrs, dialogCtrl, transclude) {\n    scope.$on('rgDialogContentLoaded', () => {\n      transclude(scope, clone => {\n        dialogCtrl.setCustomFooter(clone);\n      });\n    });\n  }\n\n  return {\n    require: '^rgDialog',\n    transclude: true,\n    link\n  };\n}\n\nfunction rgDialogContentDirective($compile, $q) {\n  return {\n    link: function link(scope, iElement) {\n      const element = iElement[0];\n      let contentScope;\n\n      function createIncludeNode() {\n        const node = document.createElement('ng-include');\n        node.setAttribute('src', 'dialog.content');\n\n        return node;\n      }\n\n      function isOldDataAPI() {\n        return scope.dialog.config.data;\n      }\n\n      function compileContent() {\n        contentScope = scope.$new();\n\n        if (angular.isDefined(scope.dialog.content)) {\n          const templateNode = angular.element(createIncludeNode());\n          element.appendChild(templateNode[0]);\n          return $compile(templateNode)(contentScope)[0];\n        }\n\n        return $q.when(scope.dialog.compileTemplate()).\n          then(compiledData => {\n            const templateScope = isOldDataAPI()\n              ? contentScope\n              : (scope.dialog.config.scope || contentScope);\n\n            // XXX(maksimrv): We should put element to directive\n            // before link because some directives (shortcuts)\n            // depends from global directives (shortcuts-app)\n            angular.element(element).append(compiledData.element);\n            compiledData.link(templateScope);\n            scope.$broadcast('rgDialogContentLoaded');\n          }).\n          catch(angular.noop);\n      }\n\n      function destroy() {\n        function cleanupElement(_element) {\n          while (_element.childNodes.length) {\n\n            // XXX(maksimrv): We should use jQuery.remove method because\n            // AngularJS intercepts all jqLite/jQuery's DOM destruction apis and fires $destroy event\n            // on all DOM nodes being removed.\n            // This can be used to clean up bindings to the DOM\n            // element before it is removed.\n            angular.element(_element.childNodes[0]).remove();\n          }\n        }\n\n        if (contentScope) {\n          contentScope.$destroy();\n          cleanupElement(element);\n        }\n      }\n\n      scope.$on('dialog.hide', destroy);\n\n      scope.$on('dialog.show', () => {\n        destroy();\n        compileContent();\n      });\n    }\n  };\n}\n\nangularModule.directive('rgDialog', rgDialogDirective);\nangularModule.directive('rgDialogTitle', rgDialogTitleDirective);\nangularModule.directive('rgDialogFooter', rgDialogFooterDirective);\nangularModule.directive('rgDialogContent', rgDialogContentDirective);\nangularModule.service('dialog', DialogService);\nangularModule.service('dialogInSidebar', DialogInSidebarService);\n\nexport default angularModule.name;\n",
  "examples": [
    {
      "name": "Dialog Ng",
      "url": "examples/dialog-ng/dialog-ng.html",
      "disableAutoSize": true,
      "files": [
        {
          "type": "html",
          "content": "\n<div ng-app=\"Example.dialog\" ng-strict-di class=\"long-page\">\n\n  <script type=\"template\" id=\"dialog-template\">\n    <div class=\"form-with-inputs\">\n      <div class=\"ring-form__group\">\n        <rg-input id=\"dialog__key\" label=\"Key\" type=\"text\">\n      </div>\n\n      <div class=\"ring-form__group\">\n        <rg-input id=\"dialog__name\" label=\"Name\" type=\"text\"\n                  error=\"Wrong value\"></rg-input>\n        <div class=\"ring-form__control__description\">Description</div>\n      </div>\n\n      <div class=\"ring-form__group\">\n        <rg-input id=\"textarea-demo\" multiline=\"true\" label=\"Textarea\"></rg-input>\n      </div>\n\n      <div class=\"ring-form__group\">\n        <rg-select\n          options=\"item.name for item in dialogExampleCtrl.arr track by item.name\"\n          id=\"rg-select-demo\"\n          label=\"Select name\"\n        ></rg-select>\n      </div>\n\n    </div>\n  </script>\n\n  <div rg-dialog=\"\"></div>\n  <div ng-controller=\"ExampleCtrl as ctrl\">\n    <rg-button ng-click=\"ctrl.showDialog()\">Show dialog</rg-button>\n  </div>\n</div>\n  ",
          "showCode": true
        },
        {
          "type": "css",
          "content": "\n:global(.custom-css-class-button-right) {\n  float: right;\n  color: #C10000;\n}\n\n:global(.form-with-inputs) {\n  margin-top: -16px;\n}\n\n:global(.long-page) {\n  height: 2000px;\n}\n\n:global(.high-field.high-field) {\n  padding: 0;\n  line-height: 32px;\n}\n  ",
          "showCode": true
        },
        {
          "type": "js",
          "content": "\nimport '@jetbrains/ring-ui/components/panel/panel.scss';\n\nimport 'angular/angular';\nimport Dialog from '@jetbrains/ring-ui/components/dialog-ng/dialog-ng';\nimport Select from '@jetbrains/ring-ui/components/select-ng/select-ng';\nimport Button from '@jetbrains/ring-ui/components/button-ng/button-ng';\nimport Input from '@jetbrains/ring-ui/components/input-ng/input-ng';\n\nangular.module('Example.dialog', [Dialog, Select, Button, Input]).\n  controller('ExampleCtrl', function ($q, $timeout, dialog) {\n    this.showDialog = function () {\n      dialog.show({\n        cssClass: 'custom-css-class',\n        title: 'Test',\n        closeOnClick: true,\n        shortcuts: {\n          'ctrl+enter': angular.noop\n        },\n        template: document.getElementById('dialog-template').innerHTML,\n        controllerAs: 'dialogExampleCtrl',\n        controller: 'DialogExampleCtrl',\n        buttons: [\n          {\n            label: 'Save',\n            default: true,\n            action: angular.noop\n          },\n          {\n            label: 'Cancel',\n            close: true\n          },\n          {\n            label: 'Dangerous Action',\n            cssClasses: 'custom-css-class-button-right',\n            action: function () {\n              return $timeout(angular.noop, 2000).\n                then(() => $q.reject('Some error'));\n            }\n          }\n        ]\n      })\n        .catch(() => console.log('dialog rejected'));\n    };\n\n    $timeout(() => this.showDialog());\n  }).\n  controller('DialogExampleCtrl', function () {\n    var dialogExampleCtrl = this;\n    dialogExampleCtrl.arr = [{name: 'Ada'}, {name: 'Nik'}];\n  });\n  ",
          "showCode": true
        }
      ]
    },
    {
      "name": "Dialog Ng in sidebar",
      "url": "examples/dialog-ng/dialog-ng-in-sidebar.html",
      "disableAutoSize": true,
      "files": [
        {
          "type": "html",
          "content": "\n<div ng-app=\"Example.dialog\" ng-strict-di>\n\n  <script type=\"template\" id=\"dialog-template\">\n    <div>\n      <div class=\"ring-form__group\">\n        <rg-input id=\"dialog__key\" type=\"text\" label=\"Key\">\n      </div>\n    </div>\n  </script>\n\n  <rg-sidebar show=\"true\">\n    <rg-dialog in-sidebar=\"true\" active=\"true\"></rg-dialog>\n  </rg-sidebar>\n\n  <div ng-controller=\"ExampleCtrl as ctrl\">\n    <rg-button ng-click=\"ctrl.showDialog()\">Show dialog</rg-button>\n  </div>\n</div>\n  ",
          "showCode": true
        },
        {
          "type": "js",
          "content": "\nimport '@jetbrains/ring-ui/components/panel/panel.scss';\n\nimport angular from 'angular';\nimport Sidebar from '@jetbrains/ring-ui/components/sidebar-ng/sidebar-ng'\nimport Dialog from '@jetbrains/ring-ui/components/dialog-ng/dialog-ng';\nimport Select from '@jetbrains/ring-ui/components/select-ng/select-ng';\nimport Button from '@jetbrains/ring-ui/components/button-ng/button-ng';\nimport Input from '@jetbrains/ring-ui/components/input-ng/input-ng';\n\nangular.module('Example.dialog', [Dialog, Select, Button, Sidebar, Input]).\n  controller('ExampleCtrl', function ($q, $timeout, dialogInSidebar) {\n    this.showDialog = function () {\n      dialogInSidebar.show({\n        title: 'Test',\n        shortcuts: {\n          'ctrl+enter': angular.noop\n        },\n        template: document.getElementById('dialog-template').innerHTML,\n        controllerAs: 'dialogExampleCtrl',\n        controller: function () {\n          this.arr = [{name: 'Ada'}, {name: 'Nik'}];\n        },\n        buttons: [\n          {\n            label: 'Save',\n            default: true,\n            action: angular.noop\n          },\n          {\n            label: 'Cancel',\n            close: true\n          }\n        ]\n      });\n    };\n\n    $timeout(() => this.showDialog(), 500);\n  });\n  ",
          "showCode": true
        }
      ]
    },
    {
      "name": "Dialog Ng with Overridden Styles",
      "url": "examples/dialog-ng/dialog-ng-with-overridden-styles.html",
      "disableAutoSize": false,
      "files": [
        {
          "type": "html",
          "content": "\n<div ng-app=\"Example.dialog\" ng-strict-di class=\"long-page\">\n\n  <script type=\"template\" id=\"dialog-template\">\n    <div>\n      <div class=\"ring-form__group\">\n        <rg-input id=\"dialog__key\" type=\"text\" label=\"Key\">\n      </div>\n\n      <rg-dialog-footer>\n        <rg-button>A button</rg-button>\n      </rg-dialog-footer>\n    </div>\n  </script>\n\n  <div rg-dialog=\"\"></div>\n  <div ng-controller=\"ExampleCtrl as ctrl\">\n    <rg-button ng-click=\"ctrl.showDialog()\">Show dialog</rg-button>\n  </div>\n</div>\n  ",
          "showCode": true
        },
        {
          "type": "css",
          "content": "\n:global(.long-page) {\n  height: 2000px;\n}\n:global(.custom-css-class) {\n  padding: 40px;\n}\n  ",
          "showCode": true
        },
        {
          "type": "js",
          "content": "\nimport '@jetbrains/ring-ui/components/panel/panel.scss';\n\nimport angular from 'angular';\nimport Dialog from '@jetbrains/ring-ui/components/dialog-ng/dialog-ng';\nimport Button from '@jetbrains/ring-ui/components/button-ng/button-ng';\nimport Input from '@jetbrains/ring-ui/components/input-ng/input-ng';\n\nangular.module('Example.dialog', [Dialog, Button, Input]).\n  controller('ExampleCtrl', function ($q, $timeout, dialog) {\n    this.showDialog = function () {\n      dialog.show({\n        cssClass: 'custom-css-class',\n        title: 'Test',\n        closeOnClick: true,\n        template: document.getElementById('dialog-template').innerHTML,\n        controllerAs: 'dialogExampleCtrl',\n        controller: function () {},\n      }).catch(() => console.log('dialog rejected'));\n    };\n\n    $timeout(() => this.showDialog());\n  });\n  ",
          "showCode": true
        }
      ]
    }
  ],
  "description": "Provides an Angular wrapper for Dialog.",
  "attrs": {
    "name": "Dialog Ng",
    "category": "Legacy Angular",
    "tags": "Ring UI Language",
    "description": "Provides an Angular wrapper for Dialog.",
    "example-file": "./dialog-ng.examples.html"
  }
};
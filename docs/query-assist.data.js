window.source = {
  "title": "Query Assist",
  "url": "query-assist.html",
  "type": "js",
  "content": "import React, {Component} from 'react';\nimport PropTypes from 'prop-types';\nimport {findDOMNode} from 'react-dom';\nimport debounce from 'just-debounce-it';\nimport classNames from 'classnames';\nimport deepEqual from 'deep-equal';\n\nimport {SearchIcon, CloseIcon} from '../icon';\n\nimport getUID from '../global/get-uid';\nimport dataTests from '../global/data-tests';\nimport {getRect, preventDefault} from '../global/dom';\nimport Caret from '../caret/caret';\nimport ContentEditable from '../contenteditable/contenteditable';\nimport PopupMenu from '../popup-menu/popup-menu';\nimport LoaderInline from '../loader-inline/loader-inline';\nimport Shortcuts from '../shortcuts/shortcuts';\nimport rerenderHOC from '../global/rerender-hoc';\nimport Theme from '../global/theme';\n\nimport QueryAssistSuggestions from './query-assist__suggestions';\n\nimport styles from './query-assist.css';\n\nconst POPUP_COMPENSATION = PopupMenu.ListProps.Dimension.ITEM_PADDING +\n  PopupMenu.PopupProps.Dimension.BORDER_WIDTH;\n\nconst ngModelStateField = 'query';\n\nfunction noop() {}\n\nfunction cleanText(text) {\n  return text.trim().replace(/([\\n\\r])+/g, ' ');\n}\n\n/**\n * @name Query Assist\n * @constructor\n * @category Components\n * @extends {ReactComponent}\n * @example-file ./query-assist.examples.html\n * @description\n *\n ## Component params\n\n+ __autoOpen__ `bool=false` Open suggestions popup during the initial render\n+ __caret__ `number=query.length` Initial caret position\n+ __clear__ `bool=false` Show clickable \"cross\" icon on the right which clears the query\n+ __className__ `string=''` Additional class for the component\n+ __popupClassName__ `string=''` Additional class for the popup\n+ __dataSource__ `func` Data source function\n+ __delay__ `number=0` Input debounce delay\n+ __disabled__ `bool=false` Disable the component\n+ __focus__ `bool=false` Initial focus\n+ __hint__ `string=''` Hint under the suggestions list\n+ __hintOnSelection__ `string=''` Hint under the suggestions list visible when a suggestion is selected\n+ __glass__ `bool=false` Show clickable \"glass\" icon on the right which applies the query\n+ __loader__ `bool=false` Show loader when a data request is in process\n+ __placeholder__ `string=''` Field placeholder value\n+ __onApply__ `func=` Called when the query is applied. An object with fields `caret`, `focus` and `query` is passed as an argument\n+ __onChange__ `func=`  Called when the query is changed. An object with fields `caret` and `query` is passed as an argument\n+ __onClear__ `func=` Called when the query is cleared. Called without arguments\n+ __onFocusChange__ `func` Called when the focus status is changed. An object with fields `focus` is passed as an argument\n+ __shortcuts__ `bool=true` Enable shortcut\n+ __query__ `string=''` Initial query\n\n ## Data source function\n\n Component class calls a data source function when user input happens and passes an object with fields `caret`, `focus` and `query` as the only argument.\n The function must return an object with the fields described below. The object can be optionally wrapped in a Promise.\n\n ### return object fields\n\n `caret` and `query` should just return server values provided to data source function.\n These fields allow the Query Assist component to recognise and drop earlier responses from the server.\n\n+ __caret__ (`string=0`) Caret from request\n+ __query__ (`string=''`) Query from request\n+ __styleRanges__ (`Array<suggestion>=`) Array of `styleRange` objects, used to highlight the request in the input field\n+ __suggestions__ (`Array<styleRange>`) Array of `suggestion` objects to show.\n\n ### `styleRange` object fields\n\n start `number` Range start (in characters)\n length `number` Range length (in characters)\n style `string` Style of the range. Possible values: `text`, `field_value`, `field_name`, `operator`\n\n ### `suggestion` object fields\n\n+ __prefix__ `string=` Suggestion option prefix\n+ __option__ `string` Suggestion option\n+ __suffix__ `string=` Suggestion option suffix\n+ __description__ `string=` Suggestion option description. Is not visible when a group is set\n+ __matchingStart__ `number` (required when matchingEnd is set) Start of the highlighted part of an option in the suggestions list (in characters)\n+ __matchingEnd__ `number` (required when matchingEnd is set) End of the highlighted part of an option in the suggestions list (in characters)\n+ __caret__ `number` Caret position after option completion (in characters)\n+ __completionStart__ `number` Where to start insertion (or replacement, when completing with the `Tab` key) of the completion option (in characters)\n+ __completionEnd__ `number` Where to end insertion of the completion option (in characters)\n+ __group__ `string=` Group title. Options with the same title are grouped under it\n+ __icon__ `string=` Icon URI, Data URI is possible\n\n */\n// eslint-disable-next-line react/no-deprecated\nexport default class QueryAssist extends Component {\n  static ngModelStateField = ngModelStateField;\n  static Theme = Theme;\n\n  static propTypes = {\n    theme: PropTypes.string,\n    autoOpen: PropTypes.bool,\n    caret: PropTypes.number,\n    clear: PropTypes.bool,\n    className: PropTypes.string,\n    popupClassName: PropTypes.string,\n    dataSource: PropTypes.func.isRequired,\n    delay: PropTypes.number,\n    disabled: PropTypes.bool,\n    focus: PropTypes.bool,\n    hint: PropTypes.string,\n    hintOnSelection: PropTypes.string,\n    glass: PropTypes.bool,\n    loader: PropTypes.bool,\n    placeholder: PropTypes.string,\n    onApply: PropTypes.func,\n    onChange: PropTypes.func,\n    onClear: PropTypes.func,\n    onFocusChange: PropTypes.func,\n    query: PropTypes.string,\n    useCustomItemRender: PropTypes.bool,\n    'data-test': PropTypes.string\n  };\n\n  static defaultProps = {\n    theme: Theme.LIGHT,\n    onApply: noop,\n    onChange: noop,\n    onClear: noop,\n    onFocusChange: noop\n  };\n\n  state = {\n    dirty: !this.props.query,\n    query: this.props.query,\n    placeholderEnabled: !this.props.query,\n    shortcuts: true,\n    suggestions: [],\n    showPopup: false\n  };\n\n  componentWillMount() {\n    this.setState({shortcuts: !!this.props.focus});\n  }\n\n  componentDidMount() {\n    const query = this.props.query || '';\n\n    this.immediateState = {\n      query,\n      caret: Number.isFinite(this.props.caret) ? this.props.caret : query.length,\n      focus: Boolean(this.props.autoOpen || this.props.focus)\n    };\n\n    this.setupRequestHandler(this.props.delay);\n\n    if (this.props.autoOpen) {\n      this.requestHandler().\n        catch(noop).\n        then(this.setCaretPosition);\n    } else {\n      this.requestStyleRanges().catch(noop);\n    }\n\n    this.setCaretPosition();\n  }\n\n  componentWillReceiveProps({caret, delay, query}) {\n    this.setupRequestHandler(delay);\n    const shouldSetCaret = typeof caret === 'number';\n\n    if (shouldSetCaret) {\n      this.immediateState.caret = caret;\n    }\n\n    if (typeof query === 'string' && query !== this.immediateState.query) {\n      this.immediateState.query = query;\n      let callback = noop;\n\n      if (query && this.props.autoOpen) {\n        callback = this.requestData;\n      } else if (query) {\n        callback = this.requestStyleRanges;\n      }\n\n      this.setState({query, placeholderEnabled: !query}, callback);\n    }\n  }\n\n  shouldComponentUpdate(props, state) {\n    return state.query !== this.state.query ||\n      state.dirty !== this.state.dirty ||\n      state.loading !== this.state.loading ||\n      state.showPopup !== this.state.showPopup ||\n      state.suggestions !== this.state.suggestions ||\n      state.styleRanges !== this.state.styleRanges ||\n      state.placeholderEnabled !== this.state.placeholderEnabled ||\n      props.placeholder !== this.props.placeholder ||\n      props.disabled !== this.props.disabled ||\n      props.clear !== this.props.clear ||\n      props.focus !== this.props.focus ||\n      props.loader !== this.props.loader ||\n      props.glass !== this.props.glass;\n  }\n\n  componentDidUpdate(prevProps) {\n    this.updateFocus(prevProps);\n  }\n\n  ngModelStateField = ngModelStateField;\n\n  handleFocusChange = e => {\n    // otherwise it's blur and false\n    const focus = e.type === 'focus';\n    this.immediateState.focus = focus;\n\n    // Track mouse state to avoid focus loss on clicks on icons.\n    // Doesn't handle really edge cases like shift+tab while mouse button is pressed.\n    if (!this.node || (!focus && this.mouseIsDownOnInput)) {\n      return;\n    }\n\n    if (!focus) {\n      this.blurInput();\n\n      // Close popup on blur by keyboard (mostly shift+tab)\n      if (!this.mouseIsDownOnPopup) {\n        this.closePopup();\n      }\n    } else {\n      this.setCaretPosition();\n    }\n\n    if (!this.mouseIsDownOnPopup) {\n      this.props.onFocusChange({focus});\n    }\n\n    this.setState({shortcuts: !!focus});\n  };\n\n  nodeRef = node => {\n    this.node = node;\n  };\n\n  updateFocus({focus, caret}) {\n    const isCaretChanged = caret !== this.props.caret;\n    const isFocusChanged = focus !== this.props.focus;\n\n    if (isFocusChanged || isCaretChanged) {\n      const focusValue = isFocusChanged ? this.props.focus : true;\n      this.setFocus(focusValue);\n    }\n  }\n\n  setCaretPosition = () => {\n    const queryLength = this.immediateState.query != null && this.immediateState.query.length;\n    const newCaretPosition =\n      this.immediateState.caret < queryLength\n        ? this.immediateState.caret\n        : queryLength;\n    const currentCaretPosition = this.caret.getPosition({avoidFocus: true});\n\n    if (this.immediateState.focus && !this.props.disabled && currentCaretPosition !== -1) {\n      // Set to end of field value if newCaretPosition is inappropriate\n      this.caret.setPosition(newCaretPosition >= 0 ? newCaretPosition : -1);\n      this.scrollInput();\n    }\n  };\n\n  scrollInput() {\n    const caretOffset = this.caret.getOffset();\n\n    if (this.input.clientWidth !== this.input.scrollWidth && caretOffset > this.input.clientWidth) {\n      this.input.scrollLeft = this.input.scrollLeft + caretOffset;\n    }\n  }\n\n  getQuery() {\n    return this.input.textContent.replace(/\\s/g, ' ');\n  }\n\n  isRenderingGlassOrLoader() {\n    const renderLoader = this.props.loader !== false && this.state.loading;\n    return this.props.glass || renderLoader;\n  }\n\n  togglePlaceholder = () => {\n    const query = this.getQuery();\n    const currentQueryIsEmpty = this.immediateState.query === '';\n    const newQueryIsEmpty = query === '';\n\n    if (newQueryIsEmpty !== currentQueryIsEmpty) {\n      this.setState({placeholderEnabled: newQueryIsEmpty});\n    }\n  };\n\n  // To hide placeholder as quickly as possible, does not work in IE/Edge\n  handleInput = () => {\n    this.togglePlaceholder();\n  };\n\n  handleKeyUp = e => {\n    const props = {\n      dirty: true,\n      query: this.getQuery(),\n      caret: this.caret.getPosition(),\n      focus: true\n    };\n\n    if (this.immediateState.query === props.query && !this.isComposing) {\n      this.handleCaretMove(e);\n      return;\n    }\n\n    this.togglePlaceholder();\n\n    if (this.isComposing) {\n      return;\n    }\n\n    this.immediateState = props;\n    this.props.onChange(props);\n    this.requestData();\n  };\n\n  // It's necessary to prevent new element creation before any other hooks\n  handleEnter = e => {\n    if (e.key === 'Enter') {\n      preventDefault(e);\n    }\n  };\n\n  handleTab = e => {\n    const list = this._popup && this._popup.list;\n    const suggestion = list && (list.getSelected() || list.getFirst());\n\n    if (suggestion && this.state.showPopup) {\n      preventDefault(e);\n\n      if (this.getQuery() !== this.immediateState.suggestionsQuery) {\n        return false;\n      }\n\n      return this.handleComplete(suggestion, true);\n    }\n\n    if (this.state.loading) {\n      preventDefault(e);\n      return false;\n    }\n\n    return true;\n  };\n\n  handlePaste(e) {\n    const INSERT_COMMAND = 'insertText';\n    if (e.clipboardData && document.queryCommandSupported(INSERT_COMMAND)) {\n      preventDefault(e);\n      const text = cleanText(e.clipboardData.getData('text/plain'));\n      document.execCommand(INSERT_COMMAND, false, text);\n    }\n  }\n\n  handleCaretMove = e => {\n    if (this.isComposing) {\n      return;\n    }\n\n    const caret = this.caret.getPosition();\n    const popupHidden = (!this.state.showPopup) && e.type === 'click';\n\n    if (!this.props.disabled && (caret !== this.immediateState.caret || popupHidden)) {\n      this.immediateState.caret = caret;\n      this.scrollInput();\n      this.requestData();\n    }\n  };\n\n  // eslint-disable-next-line no-unused-vars\n  handleStyleRangesResponse = ({suggestions, ...restProps}) => this.handleResponse(restProps);\n\n  // eslint-disable-next-line max-len\n  handleResponse = ({query = '', caret = 0, styleRanges, suggestions = []}) => new Promise((resolve, reject) => {\n    if (\n      query === this.getQuery() &&\n      (caret === this.immediateState.caret ||\n      this.immediateState.caret === undefined)\n    ) {\n      // Do not setState on unmounted component\n      if (!this.node) {\n        return;\n      }\n\n      const state = {\n        dirty: this.immediateState.dirty,\n        loading: false,\n        placeholderEnabled: !query,\n        query,\n        suggestions,\n        showPopup: !!suggestions.length\n      };\n\n      this.immediateState.suggestionsQuery = query;\n\n      // Do not update deep equal styleRanges to simplify shouldComponentUpdate check\n      if (!deepEqual(this.state.styleRanges, styleRanges)) {\n        state.styleRanges = styleRanges;\n      }\n\n      this.setState(state, resolve);\n    } else {\n      reject(new Error('Current and response queries mismatch'));\n    }\n  });\n\n  handleApply = () => {\n    this.closePopup();\n    this.immediateState.dirty = false;\n    // Only set dirty to false when query is saved already\n    if (this.immediateState.query === this.state.query) {\n      this.setState({dirty: false});\n    }\n    return this.props.onApply(this.immediateState);\n  };\n\n  handleComplete = (data, replace) => {\n    if (!data || !data.data) {\n      this.handleApply();\n\n      return;\n    }\n\n    const query = this.getQuery();\n    const currentCaret = this.immediateState.caret;\n    const suggestion = data.data;\n    const prefix = suggestion.prefix || '';\n    const suffix = suggestion.suffix || '';\n\n    const state = {\n      caret: suggestion.caret,\n      query: query.substr(0, suggestion.completionStart) + prefix + suggestion.option + suffix\n    };\n\n    if (typeof replace === 'boolean' && replace) {\n      state.query += this.immediateState.query.substr(suggestion.completionEnd);\n    } else {\n      state.query += this.immediateState.query.substr(this.immediateState.caret);\n    }\n\n    this.props.onChange(state);\n\n    const focusState = {focus: true};\n    this.props.onFocusChange(focusState);\n\n    if (state.query !== this.immediateState.query) {\n      this.setState({\n        placeholderEnabled: !state.query,\n        query: state.query\n      });\n    }\n\n    this.immediateState = Object.assign(state, focusState);\n\n    if (this.immediateState.caret !== currentCaret) {\n      this.setCaretPosition();\n    }\n\n    this.closePopup();\n    this.requestData();\n  };\n\n  requestStyleRanges = () => {\n    const {query, caret} = this.immediateState;\n\n    if (!query) {\n      return Promise.reject(new Error('Query is empty'));\n    }\n\n    return this.sendRequest({query, caret, omitSuggestions: true}).\n      then(this.handleStyleRangesResponse).\n      catch(noop);\n  };\n\n  requestHandler = () => {\n    if (this.props.disabled) {\n      return Promise.reject(new Error('QueryAssist(@jetbrains/ring-ui): null exception'));\n    }\n\n    const {query, caret} = this.immediateState;\n\n    return this.sendRequest({query, caret}).\n      then(this.handleResponse).\n      catch(noop);\n  };\n\n  sendRequest(params) {\n    const value = this.props.dataSource(params);\n    const dataPromise = Promise.resolve(value);\n    const CLOSE_POPUP_TIMEOUT = 500;\n\n    // Close popup after timeout between long requests\n    const timeout = window.setTimeout(() => {\n      if (this.node) {\n        this.setState({\n          loading: true\n        });\n      }\n\n      if (params.query === this.immediateState.query) {\n        this.closePopup();\n      }\n    }, CLOSE_POPUP_TIMEOUT);\n\n    dataPromise.then(() => window.clearTimeout(timeout));\n\n    return dataPromise;\n  }\n\n  getPopupOffset(suggestions) {\n    const ICON_SPACING = 12;\n    const minOffset = this.isRenderingGlassOrLoader() ? ICON_SPACING : 0;\n\n    if (!this.input) {\n      return minOffset;\n    }\n\n    // First suggestion should be enough?\n    const suggestion = suggestions && suggestions[0];\n\n    // Check if suggestion begins not from the end\n    const completionStart = suggestion &&\n      suggestion.completionStart !== suggestion.completionEnd &&\n      suggestion.completionStart;\n\n    const inputChildren = this.input.firstChild && this.input.firstChild.children;\n    const completionStartNode = inputChildren &&\n      Number.isInteger(completionStart) &&\n      inputChildren[Math.min(completionStart, inputChildren.length - 1)];\n\n    let offset = completionStartNode &&\n      (getRect(completionStartNode).right - getRect(this.input).left);\n\n    if (!offset) {\n      const caret = this.caret.getOffset();\n\n      // Do not compensate caret in the beginning of field\n      if (caret === 0) {\n        return minOffset;\n      } else {\n        offset = caret;\n      }\n    }\n\n    const result = offset - POPUP_COMPENSATION;\n    return result < minOffset ? minOffset : result;\n  }\n\n  handleCtrlSpace = e => {\n    preventDefault(e);\n\n    if (!this.state.showPopup) {\n      this.requestData();\n    }\n  };\n\n  trackPopupMouseState = e => {\n    this.mouseIsDownOnPopup = e.type === 'mousedown';\n  };\n\n  trackInputMouseState = e => {\n    this.mouseIsDownOnInput = e.type === 'mousedown';\n  };\n\n  trackCompositionState = e => {\n    this.isComposing = e.type !== 'compositionend';\n  };\n\n  closePopup = () => {\n    if (this.node) {\n      this.setState({showPopup: false});\n    }\n  };\n\n  clearQuery = () => {\n    const state = {\n      dirty: false,\n      caret: 0,\n      query: '',\n      focus: true\n    };\n\n    this.props.onChange(state);\n    this.props.onClear();\n\n    this.immediateState = state;\n    this.setState({\n      dirty: false,\n      query: '',\n      placeholderEnabled: true,\n      loading: false\n    });\n  };\n\n  // See http://stackoverflow.com/questions/12353247/force-contenteditable-div-to-stop-accepting-input-after-it-loses-focus-under-web\n  blurInput() {\n    window.getSelection().removeAllRanges();\n  }\n\n  /**\n   * Optionally setup data request delay. For each component create a separate\n   * instance of the delayed function. This may help reduce the load on the server\n   * when the user quickly inputs data.\n   */\n  setupRequestHandler(delay) {\n    const needDelay = typeof delay === 'number';\n    const hasDelay = this.requestData !== this.requestHandler;\n\n    if (!this.requestData || hasDelay !== needDelay) {\n      if (needDelay) {\n        this.requestData = debounce(this.requestHandler, delay);\n      } else {\n        this.requestData = this.requestHandler;\n      }\n    }\n  }\n\n  _renderSuggestion(suggestion) {\n    const {ITEM} = PopupMenu.ListProps.Type;\n    const {description, icon, group} = suggestion;\n    const key = QueryAssistSuggestions.createKey(suggestion);\n    const label = QueryAssistSuggestions.renderLabel(suggestion);\n\n    return {\n      key,\n      icon,\n      label,\n      description,\n      group,\n      rgItemType: ITEM,\n      data: suggestion\n    };\n  }\n\n  renderSuggestions() {\n    const {suggestions} = this.state;\n    if (!suggestions || !suggestions.length) {\n      return [];\n    }\n    return QueryAssistSuggestions.renderList(suggestions, this._renderSuggestion);\n  }\n\n  renderQuery() {\n    const {dirty, styleRanges, query} = this.state;\n    const classes = [];\n    const LETTER_CLASS = 'letter';\n    const LETTER_DEFAULT_CLASS = styles.letterDefault;\n\n    if (styleRanges && styleRanges.length) {\n      styleRanges.forEach((item, index) => {\n        if (dirty && index === styleRanges.length - 1 && item.style === 'text') {\n          return;\n        }\n        const styleName = `${LETTER_CLASS}-${item.style.replace('_', '-')}`;\n\n        for (let i = item.start; i < item.start + item.length; i++) {\n          classes[i] = styles[styleName];\n        }\n      });\n    }\n\n    return [...query].map((letter, index, letters) => {\n      const className = classNames(styles.letter, classes[index] || LETTER_DEFAULT_CLASS);\n\n      const dataTest = (letters.length - 1 === index)\n        ? 'ring-query-assist-last-letter'\n        : null;\n\n      // \\u00a0 === &nbsp;\n      return (\n        <span\n          // eslint-disable-next-line react/no-array-index-key\n          key={index + letter}\n          className={className}\n          data-test={dataTest}\n        >{letter === ' ' ? '\\u00a0' : letter}</span>\n      );\n    });\n  }\n\n  setFocus(focus) {\n    this.setState({shortcuts: !!focus});\n\n    const isComponentFocused = Boolean(this.immediateState.focus);\n\n    if (focus === false && isComponentFocused) {\n      this.immediateState.focus = focus;\n      this.blurInput();\n    } else if (focus === true && !isComponentFocused) {\n      this.immediateState.focus = focus;\n      this.setCaretPosition();\n    }\n  }\n\n  inputRef = node => {\n    if (!node) {\n      return;\n    }\n\n    // eslint-disable-next-line react/no-find-dom-node\n    this.input = findDOMNode(node);\n    this.caret = new Caret(this.input);\n  };\n\n  popupRef = node => {\n    this._popup = node;\n  };\n\n  placeholderRef = node => {\n    this.placeholder = node;\n  };\n\n  glassRef = node => {\n    this.glass = node;\n  };\n\n  loaderRef = node => {\n    this.loader = node;\n  };\n\n  clearRef = node => {\n    this.clear = node;\n  };\n\n  shortcutsScope = getUID('ring-query-assist-');\n  shortcutsMap = {\n    del: noop,\n    enter: this.handleComplete,\n    'command+enter': this.handleComplete,\n    'ctrl+enter': this.handleComplete,\n    'ctrl+space': this.handleCtrlSpace,\n    tab: this.handleTab,\n    right: noop,\n    left: noop,\n    space: noop,\n    home: noop,\n    end: noop\n  };\n\n  render() {\n    const {theme, glass, 'data-test': dataTest, useCustomItemRender} = this.props;\n    const renderPlaceholder = !!this.props.placeholder && this.state.placeholderEnabled;\n    const renderClear = this.props.clear && !!this.state.query;\n    const renderLoader = this.props.loader !== false && this.state.loading;\n    const renderGlass = glass && !renderLoader;\n    const renderUnderline = theme === Theme.DARK;\n\n    const inputClasses = classNames({\n      [`${styles.input} ring-js-shortcuts`]: true,\n      [styles.inputGap]: renderClear,\n      [styles.inputLeftGap]: this.isRenderingGlassOrLoader(),\n      [styles.inputDisabled]: this.props.disabled\n    });\n\n    return (\n      <div\n        data-test={dataTests('ring-query-assist', dataTest)}\n        className={classNames(styles.queryAssist, styles[theme])}\n        onMouseDown={this.trackInputMouseState}\n        onMouseUp={this.trackInputMouseState}\n        ref={this.nodeRef}\n      >\n        {this.state.shortcuts &&\n          (\n            <Shortcuts\n              map={this.shortcutsMap}\n              scope={this.shortcutsScope}\n            />\n          )\n        }\n\n        {renderGlass && (\n          <SearchIcon\n            className={classNames(styles.icon, styles.iconGlass)}\n            iconRef={this.glassRef}\n            onClick={this.handleApply}\n            size={SearchIcon.Size.Size16}\n            data-test=\"query-assist-search-icon\"\n          />\n        )}\n        {renderLoader && (\n          <div\n            className={classNames(styles.icon, styles.loader, {\n              [styles.loaderOnTheRight]: !glass\n            })}\n            ref={this.loaderRef}\n          >\n            <LoaderInline theme={theme}/>\n          </div>\n        )}\n\n        <ContentEditable\n          className={inputClasses}\n          data-test=\"ring-query-assist-input\"\n          ref={this.inputRef}\n          disabled={this.props.disabled}\n          onComponentUpdate={this.setCaretPosition}\n\n          onBlur={this.handleFocusChange}\n          onClick={this.handleCaretMove}\n          onCompositionStart={this.trackCompositionState}\n          onCompositionEnd={this.trackCompositionState}\n          onFocus={this.handleFocusChange}\n          onInput={this.handleInput}\n          onKeyDown={this.handleEnter}\n          onKeyUp={this.handleKeyUp}\n          onPaste={this.handlePaste}\n\n          spellCheck=\"false\"\n        >{this.state.query && <span>{this.renderQuery()}</span>}</ContentEditable>\n\n        {renderPlaceholder && (\n          <span\n            className={classNames(styles.placeholder, {\n              [styles.placeholderSpaced]: glass\n            })}\n            ref={this.placeholderRef}\n            onClick={this.handleCaretMove}\n            data-test=\"query-assist-placeholder\"\n          >\n            {this.props.placeholder}\n          </span>\n        )}\n        {renderUnderline && <div className={styles.focusUnderline}/>}\n        {renderClear && (\n          <CloseIcon\n            className={classNames(styles.icon, styles.iconClear)}\n            iconRef={this.clearRef}\n            onClick={this.clearQuery}\n            size={CloseIcon.Size.Size16}\n            data-test=\"query-assist-clear-icon\"\n          />\n        )}\n        <PopupMenu\n          hidden={!this.state.showPopup}\n          onCloseAttempt={this.closePopup}\n          ref={this.popupRef}\n          anchorElement={this.node}\n          keepMounted\n          attached\n          className={classNames(styles[theme], this.props.popupClassName)}\n          directions={[PopupMenu.PopupProps.Directions.BOTTOM_RIGHT]}\n          data={useCustomItemRender ? this.state.suggestions : this.renderSuggestions()}\n          data-test=\"ring-query-assist-popup\"\n          hint={this.props.hint}\n          hintOnSelection={this.props.hintOnSelection}\n          left={this.getPopupOffset(this.state.suggestions)}\n          maxHeight={PopupMenu.PopupProps.MaxHeight.SCREEN}\n          onMouseDown={this.trackPopupMouseState}\n          onMouseUp={this.trackPopupMouseState}\n          onSelect={this.handleComplete}\n        />\n      </div>\n    );\n  }\n}\n\nexport const RerenderableQueryAssist = rerenderHOC(QueryAssist, {captureNode: false});\n",
  "examples": [
    {
      "name": "QueryAssist",
      "url": "examples/query-assist/query-assist.html",
      "disableAutoSize": true,
      "files": [
        {
          "type": "html",
          "content": "\n<div id=\"example\">\n</div>\n\n<div class=\"example-dark\" id=\"example-dark\">\n</div>\n  ",
          "showCode": true
        },
        {
          "type": "js",
          "content": "\nimport React from 'react';\nimport {render} from 'react-dom';\nimport hubConfig from '@ring-ui/docs/components/hub-config';\n\nimport QueryAssist from '@jetbrains/ring-ui/components/query-assist/query-assist';\nimport Auth from '@jetbrains/ring-ui/components/auth/auth';\nimport HTTP from '@jetbrains/ring-ui/components/http/http';\n\nconst log = obj => {\n  const div = document.createElement('div');\n  div.innerHTML = JSON.stringify(obj);\n  document.getElementById('example').appendChild(div);\n};\n\nconst auth = new Auth(hubConfig);\nconst http = new HTTP(auth, auth.getAPIPath());\n\nconst dataSource = props => {\n  const params = {\n    query: {\n      ...props,\n      fields: 'query,caret,styleRanges' + (props.omitSuggestions ? '' : ',suggestions')\n    }\n  }\n\n  return http.get('users/queryAssist', params);\n}\n\nauth.init().then(() => {\n  render(\n    <QueryAssist\n      query=\"test\"\n      placeholder=\"placeholder\"\n      popupClassName=\"popupClassNameTest\"\n      glass\n      clear\n      onApply={log}\n      focus\n      hint=\"lol\"\n      hintOnSelection=\"lol selected\"\n      popupClassName=\"test\"\n      dataSource={dataSource}\n    />,\n    document.getElementById('example')\n  );\n});\n  ",
          "showCode": true
        }
      ]
    },
    {
      "name": "QueryAssist (no auth)",
      "url": "examples/query-assist/query-assist-no-auth.html",
      "disableAutoSize": true,
      "files": [
        {
          "type": "html",
          "content": "\n<div id=\"query-assist\">\n</div>\n  ",
          "showCode": true
        },
        {
          "type": "js",
          "content": "\nimport React from 'react';\nimport {render} from 'react-dom';\nimport QueryAssist from '@jetbrains/ring-ui/components/query-assist/query-assist';\n\nconst log = obj => {\n  const div = document.createElement('div');\n  div.innerHTML = JSON.stringify(obj);\n  document.getElementById('query-assist').appendChild(div);\n};\n\nconst dataSource = ({query, caret}) => ({\n  query,\n  caret,\n  styleRanges: [\n    {start: 0, length: 1, style: 'text'},\n    {start: 1, length: 1, style: 'field_value'},\n    {start: 2, length: 1, style: 'field_name'},\n    {start: 3, length: 1, style: 'operator'}\n  ],\n  suggestions: [{\n    prefix: 'login: ',\n    option: 'test',\n    suffix: ' ',\n    description: '1',\n    matchingStart: 0,\n    matchingEnd: query.length,\n    caret: 2,\n    completionStart: 0,\n    completionEnd: query.length,\n    group: 'Logins'\n  }, {\n    prefix: 'login: ',\n    option: 'test.1',\n    suffix: ' ',\n    description: '2',\n    matchingStart: 0,\n    matchingEnd: query.length,\n    caret: 2,\n    completionStart: 0,\n    completionEnd: query.length,\n    group: 'Logins'\n  }, {\n    prefix: 'name: ',\n    option: 'another',\n    suffix: ' ',\n    description: '2',\n    matchingStart: 0,\n    matchingEnd: query.length,\n    caret: 2,\n    completionStart: 0,\n    completionEnd: query.length,\n    group: 'Names'\n  }]\n});\n\nrender(\n  <QueryAssist\n    placeholder=\"placeholder\"\n    glass\n    clear\n    onApply={log}\n    hint=\"hint\"\n    hintOnSelection=\"hint on selection\"\n    dataSource={dataSource}\n  />,\n  document.getElementById('query-assist')\n);\n  ",
          "showCode": true
        }
      ]
    },
    {
      "name": "QueryAssist (custom renderer)",
      "url": "examples/query-assist/query-assist-custom-renderer.html",
      "disableAutoSize": true,
      "files": [
        {
          "type": "html",
          "content": "\n<div id=\"query-assist\">\n</div>\n  ",
          "showCode": true
        },
        {
          "type": "js",
          "content": "\nimport React from 'react';\nimport {render} from 'react-dom';\nimport QueryAssist from '@jetbrains/ring-ui/components/query-assist/query-assist';\nimport List from '@jetbrains/ring-ui/components/list/list';\n\nconst log = obj => {\n  const div = document.createElement('div');\n  div.innerHTML = JSON.stringify(obj);\n  document.getElementById('query-assist').appendChild(div);\n};\n\nconst template = item => (\n  React.createElement(\n    'span',\n    null,\n    `My name is ${item.description}, my ${item.prefix} is ${item.option}`\n  )\n);\n\nconst dataSource = ({query, caret}) => ({\n  query,\n  caret,\n  styleRanges: [\n    {start: 0, length: 1, style: 'text'},\n    {start: 1, length: 1, style: 'field_value'},\n    {start: 2, length: 1, style: 'field_name'},\n    {start: 3, length: 1, style: 'operator'}\n  ],\n  suggestions: [{\n    prefix: 'login:',\n    option: 'John.Abrams',\n    description: 'John Abrams',\n    group: 'Logins',\n  }, {\n    prefix: 'login:',\n    option: 'lenni',\n    description: 'Lenni Joy',\n    group: 'Names',\n  }].map(i => {\n      i.rgItemType = List.ListProps.Type.CUSTOM\n      i.template = template(i);\n      i.data = i;\n      return i;\n    })\n});\n\nrender(\n<QueryAssist\n  placeholder=\"placeholder\"\n  glass\n  clear\n  onApply={log}\n  hint=\"hint\"\n  hintOnSelection=\"hint on selection\"\n  dataSource={dataSource}\n  useCustomItemRender={true}\n/>,\ndocument.getElementById('query-assist')\n);\n  ",
          "showCode": true
        }
      ]
    },
    {
      "name": "QueryAssist dark theme (no auth)",
      "url": "examples/query-assist/query-assist-dark-theme-no-auth.html",
      "disableAutoSize": true,
      "files": [
        {
          "type": "html",
          "content": "\n<div class=\"example-dark\">\n  <div id=\"query-assist\">\n  </div>\n</div>\n  ",
          "showCode": true
        },
        {
          "type": "css",
          "content": "\n:global(body) {\n  margin: 0;\n}\n\n:global(.example-dark) {\n  background: #000;\n  padding: 16px;\n  padding-bottom: 0;\n}\n  ",
          "showCode": true
        },
        {
          "type": "js",
          "content": "\nimport React from 'react';\nimport {render} from 'react-dom';\nimport QueryAssist from '@jetbrains/ring-ui/components/query-assist/query-assist';\n\nconst log = obj => {\n  const div = document.createElement('div');\n  div.innerHTML = JSON.stringify(obj);\n  document.getElementById('query-assist').appendChild(div);\n};\n\nconst dataSource = async ({query, caret}) => {\n  return {\n    query,\n    caret,\n    styleRanges: [\n      {start: 0, length: 1, style: 'text'},\n      {start: 1, length: 1, style: 'field_value'},\n      {start: 2, length: 1, style: 'field_name'},\n      {start: 3, length: 1, style: 'operator'}\n    ],\n    suggestions: [{\n      prefix: 'login: ',\n      option: 'test',\n      suffix: ' ',\n      description: '1',\n      matchingStart: 0,\n      matchingEnd: query.length,\n      caret: 2,\n      completionStart: 0,\n      completionEnd: query.length,\n      group: 'logins'\n    }, {\n      prefix: 'login: ',\n      option: 'test.1',\n      suffix: ' ',\n      description: '2',\n      matchingStart: 0,\n      matchingEnd: query.length,\n      caret: 2,\n      completionStart: 0,\n      completionEnd: query.length,\n      group: 'logins'\n    }]\n  }\n}\n\nrender(\n  <QueryAssist\n    placeholder=\"placeholder\"\n    theme={QueryAssist.Theme.DARK}\n    glass\n    clear\n    onApply={log}\n    hint=\"hint\"\n    hintOnSelection=\"hint on selection\"\n    dataSource={dataSource}\n  />,\n  document.getElementById('query-assist')\n);\n  ",
          "showCode": true
        }
      ]
    }
  ],
  "description": "\n\n ## Component params\n\n+ __autoOpen__ `bool=false` Open suggestions popup during the initial render\n+ __caret__ `number=query.length` Initial caret position\n+ __clear__ `bool=false` Show clickable \"cross\" icon on the right which clears the query\n+ __className__ `string=''` Additional class for the component\n+ __popupClassName__ `string=''` Additional class for the popup\n+ __dataSource__ `func` Data source function\n+ __delay__ `number=0` Input debounce delay\n+ __disabled__ `bool=false` Disable the component\n+ __focus__ `bool=false` Initial focus\n+ __hint__ `string=''` Hint under the suggestions list\n+ __hintOnSelection__ `string=''` Hint under the suggestions list visible when a suggestion is selected\n+ __glass__ `bool=false` Show clickable \"glass\" icon on the right which applies the query\n+ __loader__ `bool=false` Show loader when a data request is in process\n+ __placeholder__ `string=''` Field placeholder value\n+ __onApply__ `func=` Called when the query is applied. An object with fields `caret`, `focus` and `query` is passed as an argument\n+ __onChange__ `func=`  Called when the query is changed. An object with fields `caret` and `query` is passed as an argument\n+ __onClear__ `func=` Called when the query is cleared. Called without arguments\n+ __onFocusChange__ `func` Called when the focus status is changed. An object with fields `focus` is passed as an argument\n+ __shortcuts__ `bool=true` Enable shortcut\n+ __query__ `string=''` Initial query\n\n ## Data source function\n\n Component class calls a data source function when user input happens and passes an object with fields `caret`, `focus` and `query` as the only argument.\n The function must return an object with the fields described below. The object can be optionally wrapped in a Promise.\n\n ### return object fields\n\n `caret` and `query` should just return server values provided to data source function.\n These fields allow the Query Assist component to recognise and drop earlier responses from the server.\n\n+ __caret__ (`string=0`) Caret from request\n+ __query__ (`string=''`) Query from request\n+ __styleRanges__ (`Array<suggestion>=`) Array of `styleRange` objects, used to highlight the request in the input field\n+ __suggestions__ (`Array<styleRange>`) Array of `suggestion` objects to show.\n\n ### `styleRange` object fields\n\n start `number` Range start (in characters)\n length `number` Range length (in characters)\n style `string` Style of the range. Possible values: `text`, `field_value`, `field_name`, `operator`\n\n ### `suggestion` object fields\n\n+ __prefix__ `string=` Suggestion option prefix\n+ __option__ `string` Suggestion option\n+ __suffix__ `string=` Suggestion option suffix\n+ __description__ `string=` Suggestion option description. Is not visible when a group is set\n+ __matchingStart__ `number` (required when matchingEnd is set) Start of the highlighted part of an option in the suggestions list (in characters)\n+ __matchingEnd__ `number` (required when matchingEnd is set) End of the highlighted part of an option in the suggestions list (in characters)\n+ __caret__ `number` Caret position after option completion (in characters)\n+ __completionStart__ `number` Where to start insertion (or replacement, when completing with the `Tab` key) of the completion option (in characters)\n+ __completionEnd__ `number` Where to end insertion of the completion option (in characters)\n+ __group__ `string=` Group title. Options with the same title are grouped under it\n+ __icon__ `string=` Icon URI, Data URI is possible",
  "attrs": {
    "name": "Query Assist",
    "constructor": "",
    "category": "Components",
    "extends": "{ReactComponent}",
    "example-file": "./query-assist.examples.html",
    "description": "\n\n ## Component params\n\n+ __autoOpen__ `bool=false` Open suggestions popup during the initial render\n+ __caret__ `number=query.length` Initial caret position\n+ __clear__ `bool=false` Show clickable \"cross\" icon on the right which clears the query\n+ __className__ `string=''` Additional class for the component\n+ __popupClassName__ `string=''` Additional class for the popup\n+ __dataSource__ `func` Data source function\n+ __delay__ `number=0` Input debounce delay\n+ __disabled__ `bool=false` Disable the component\n+ __focus__ `bool=false` Initial focus\n+ __hint__ `string=''` Hint under the suggestions list\n+ __hintOnSelection__ `string=''` Hint under the suggestions list visible when a suggestion is selected\n+ __glass__ `bool=false` Show clickable \"glass\" icon on the right which applies the query\n+ __loader__ `bool=false` Show loader when a data request is in process\n+ __placeholder__ `string=''` Field placeholder value\n+ __onApply__ `func=` Called when the query is applied. An object with fields `caret`, `focus` and `query` is passed as an argument\n+ __onChange__ `func=`  Called when the query is changed. An object with fields `caret` and `query` is passed as an argument\n+ __onClear__ `func=` Called when the query is cleared. Called without arguments\n+ __onFocusChange__ `func` Called when the focus status is changed. An object with fields `focus` is passed as an argument\n+ __shortcuts__ `bool=true` Enable shortcut\n+ __query__ `string=''` Initial query\n\n ## Data source function\n\n Component class calls a data source function when user input happens and passes an object with fields `caret`, `focus` and `query` as the only argument.\n The function must return an object with the fields described below. The object can be optionally wrapped in a Promise.\n\n ### return object fields\n\n `caret` and `query` should just return server values provided to data source function.\n These fields allow the Query Assist component to recognise and drop earlier responses from the server.\n\n+ __caret__ (`string=0`) Caret from request\n+ __query__ (`string=''`) Query from request\n+ __styleRanges__ (`Array<suggestion>=`) Array of `styleRange` objects, used to highlight the request in the input field\n+ __suggestions__ (`Array<styleRange>`) Array of `suggestion` objects to show.\n\n ### `styleRange` object fields\n\n start `number` Range start (in characters)\n length `number` Range length (in characters)\n style `string` Style of the range. Possible values: `text`, `field_value`, `field_name`, `operator`\n\n ### `suggestion` object fields\n\n+ __prefix__ `string=` Suggestion option prefix\n+ __option__ `string` Suggestion option\n+ __suffix__ `string=` Suggestion option suffix\n+ __description__ `string=` Suggestion option description. Is not visible when a group is set\n+ __matchingStart__ `number` (required when matchingEnd is set) Start of the highlighted part of an option in the suggestions list (in characters)\n+ __matchingEnd__ `number` (required when matchingEnd is set) End of the highlighted part of an option in the suggestions list (in characters)\n+ __caret__ `number` Caret position after option completion (in characters)\n+ __completionStart__ `number` Where to start insertion (or replacement, when completing with the `Tab` key) of the completion option (in characters)\n+ __completionEnd__ `number` Where to end insertion of the completion option (in characters)\n+ __group__ `string=` Group title. Options with the same title are grouped under it\n+ __icon__ `string=` Icon URI, Data URI is possible"
  }
};
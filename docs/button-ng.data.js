window.source = {
  "title": "Button Ng",
  "url": "button-ng.html",
  "type": "js",
  "content": "import angular from 'angular';\nimport 'dom4';\nimport classNames from 'classnames';\nimport 'core-js/modules/es7.array.includes';\n\nimport RingAngularComponent from '../global/ring-angular-component';\nimport IconNG from '../icon-ng/icon-ng';\nimport Theme, {applyTheme} from '../global/theme';\nimport styles from '../button/button.css';\n\nimport overrides from './button-ng.css';\n\nconst {ringIconVerticalAlignFix, ringIconDefaultColor, iconMarginFix, transcludeSpacer} = overrides;\nconst DEFAULT_ICON_SIZE = 16;\n\n/**\n * @name Button Ng\n * @tags Ring UI Language\n * @category Legacy Angular\n * @description Provides an Angular wrapper for Button.\n * @example-file ./button-ng.examples.html\n */\n\n\nconst angularModule = angular.module('Ring.button', [IconNG]);\nconst ORDER_NOT_DEFINED = '-1';\nconst buttonClasses = classNames(\n  styles.button,\n  styles.buttonWithoutIcon,\n  ringIconVerticalAlignFix,\n  styles.light\n);\n\nconst LOADER_BACKGROUND_SELECTOR = '.js-button-loader';\n\nclass ButtonController extends RingAngularComponent {\n  static $inject = ['$element', '$attrs', '$scope', '$compile', '$log'];\n\n  constructor(...args) {\n    super(...args);\n\n    const {$element, $attrs, $scope} = this.$inject;\n    $scope.styles = styles;\n    this.element = $element[0];\n\n    const modifiers = ['delayed', 'loader', 'danger', 'short', 'active', 'text', 'inline', 'narrowRight'];\n    const cl = this.element.classList;\n\n    modifiers.forEach(mod => {\n      $scope.$watch(() => $scope.$eval($attrs[mod]), val => {\n        const attrName = `data-test-${mod}`;\n\n        if (val) {\n          cl.add(styles[mod]);\n          this.element.setAttribute(attrName, true);\n        } else {\n          cl.remove(styles[mod]);\n          this.element.removeAttribute(attrName);\n        }\n\n        if (mod === 'loader') {\n          this.element.querySelector(LOADER_BACKGROUND_SELECTOR).\n            classList[val ? 'add' : 'remove'](styles.loaderBackground);\n        }\n      });\n    });\n\n    const tabIndex = $attrs.tabindex || ORDER_NOT_DEFINED;\n    if (tabIndex !== ORDER_NOT_DEFINED) {\n      this.element.setAttribute('tabindex', tabIndex);\n    }\n\n    $scope.$watch(() => $scope.$eval($attrs.loader), val => {\n      if (val) {\n        this.element.setAttribute('tabindex', ORDER_NOT_DEFINED);\n      } else if (tabIndex !== ORDER_NOT_DEFINED) {\n        this.element.setAttribute('tabindex', tabIndex);\n      } else {\n        this.element.removeAttribute('tabindex');\n      }\n    });\n  }\n\n  $postLink() {\n    const {$attrs} = this.$inject;\n    if (!$attrs.hasOwnProperty('mode')) {\n      this.findTranscludeNode().classList.add(ringIconDefaultColor);\n    }\n    $attrs.$observe('mode', this.updateMode);\n    $attrs.$observe('icon', this.updateIcon);\n    $attrs.$observe('iconSize', this.updateIcon);\n    $attrs.$observe('theme', this.updateTheme);\n  }\n\n  updateTheme = themeName => {\n    if (isValidTheme(themeName)) {\n      changeTheme(this.element, {currentTheme: themeName});\n    }\n  };\n\n  findTranscludeNode = () => this.element.query('ng-transclude');\n\n  updateMode = val => {\n    const cl = this.element.classList;\n    if (val === 'primary' || val === 'blue') {\n      // Deprecation fallback. Someone please remove this one day.\n      if (val === 'blue') {\n        this.$inject.$log.warn(\n          'Ring UI ButtonNG doesn\\'t have \"blue\" mode anymore. Use \"primary\" mode instead.',\n          this.element\n        );\n      }\n\n      cl.add(styles.primary);\n    } else {\n      cl.remove(styles.primary);\n    }\n  };\n\n  updateIcon = () => {\n    const {$attrs, $compile, $scope} = this.$inject;\n    const icon = this.element.query('rg-icon');\n    const transcludeNode = this.findTranscludeNode();\n    const glyph = $attrs.icon;\n    const size = $attrs.iconSize || DEFAULT_ICON_SIZE;\n    const cl = this.element.classList;\n\n    if (glyph) {\n      cl.remove(styles.buttonWithoutIcon);\n      cl.add(styles.withIcon);\n      transcludeNode.classList.add(transcludeSpacer);\n      icon.setAttribute('glyph', glyph);\n      icon.setAttribute('size', size);\n    } else {\n      cl.remove(styles.withIcon);\n      cl.add(styles.buttonWithoutIcon);\n      transcludeNode.classList.remove(transcludeSpacer);\n      icon.removeAttribute('glyph');\n      icon.removeAttribute('size');\n    }\n\n    if (glyph && !transcludeNode.textContent) {\n      cl.add(styles.onlyIcon);\n    } else {\n      cl.remove(styles.onlyIcon);\n    }\n\n    $compile(icon)($scope);\n  }\n}\n\n\nfunction isValidTheme(themeName) {\n  return themeName && Object.values(Theme).some(theme => theme === themeName);\n}\n\nfunction changeTheme(element, data) {\n  return applyTheme({\n    element,\n    prevTheme: data.prevTheme && styles[data.prevTheme] || styles.light,\n    currentTheme: styles[data.currentTheme]\n  });\n}\n\nfunction createButtonDirective(tagName) {\n  return () => ({\n    restrict: 'E',\n    transclude: true,\n    replace: true,\n    require: {\n      rgThemeCtrl: '?^^rgTheme'\n    },\n    template: `\n  <${tagName} class=\"${buttonClasses}\">\n  <span class=\"${styles.content}\"\n  ><rg-icon class=\"${classNames(styles.icon, iconMarginFix)}\" size=\"0\"></rg-icon\n  ><ng-transclude></ng-transclude\n  ></span\n  ><div class=\"js-button-loader\"></div>\n  </${tagName}>\n    `,\n    controller: ButtonController,\n    link: (scope, element, attrs, {rgThemeCtrl}) => {\n      if (rgThemeCtrl) {\n        changeTheme(element[0], {currentTheme: rgThemeCtrl.theme});\n        rgThemeCtrl.on('change', (event, data) => changeTheme(element[0], data));\n      }\n    }\n  });\n}\n\n\nangularModule.directive('rgButton', createButtonDirective('button'));\nangularModule.directive('rgButtonLink', createButtonDirective('a'));\n\nexport default angularModule.name;\n",
  "examples": [
    {
      "name": "Button Ng",
      "url": "examples/button-ng/button-ng.html",
      "disableAutoSize": false,
      "files": [
        {
          "type": "css",
          "content": "\np {\n  margin: 16px 0;\n}\n\n:global(.dark) {\n  margin: -8px;\n  padding: 8px;\n  background: #000;\n}\n  ",
          "showCode": true
        },
        {
          "type": "html",
          "content": "\n<div ng-app=\"test\" ng-strict-di ng-controller=\"testCtrl\">\n\n  <rg-checkbox ng-model=\"$root.checkbox\"><b>Dark theme</b></rg-checkbox>\n\n  <rg-theme theme=\"$root.checkbox ? Theme.DARK : Theme.LIGHT\">\n    <div style=\"margin: 8px 0 0 8px; padding: 1px 14px\"\n         ng-style=\"{'background-color': $root.checkbox === true ? 'black' : 'inherit'}\">\n      <p>\n        <rg-button>Press me</rg-button>\n        <rg-button>Press me Press me Press me Press me Press me</rg-button>\n        <rg-button disabled=\"true\">Press me</rg-button>\n        <rg-button loader=\"true\">Press me</rg-button>\n        <rg-button delayed=\"true\">Press me</rg-button>\n        <rg-button text=\"true\">Press me</rg-button>\n      </p>\n\n      <p>\n        <rg-button mode=\"primary\">Press me</rg-button>\n        <rg-button mode=\"primary\">Press me Press me Press me Press me Press me</rg-button>\n        <rg-button mode=\"primary\" disabled=\"true\">Press me</rg-button>\n        <rg-button mode=\"primary\" loader=\"true\">Press me</rg-button>\n        <rg-button mode=\"primary\" delayed=\"true\">Press me</rg-button>\n        <rg-button mode=\"primary\" text=\"true\">Press me</rg-button>\n      </p>\n\n      <p>\n        <rg-button>Press me</rg-button>\n        <rg-button icon=\"{{close}}\">Action with icon</rg-button>\n        <rg-button narrow-right=\"true\">Dropdown <rg-icon glyph=\"{{chevronDown}}\" size=\"16\" color=\"GRAY\"></rg-icon></rg-button>\n        <rg-button icon=\"{{close}}\" mode=\"primary\"></rg-button>\n        <rg-button icon=\"{{permission}}\" disabled=\"true\"></rg-button>\n        <rg-button icon=\"{{pencil}}\" loader=\"true\"></rg-button>\n        <rg-button>Press me</rg-button>\n      </p>\n\n      <p>\n        <rg-button danger=\"true\">Press me</rg-button>\n        <rg-button danger=\"true\" disabled=\"true\">Press me</rg-button>\n        <rg-button danger=\"true\" loader=\"true\">Press me</rg-button>\n        <rg-button danger=\"true\" icon=\"{{pencil}}\"></rg-button>\n      </p>\n\n      <p>\n        <rg-button-link href=\"/button-link\">Button link</rg-button-link>\n        <rg-button-link href=\"/button-link\" disabled=\"true\">Button link\n        </rg-button-link>\n        <rg-button-link href=\"/button-link\" loader=\"true\">Button link\n        </rg-button-link>\n        <rg-button-link href=\"/button-link\" icon=\"{{pencil}}\"></rg-button-link>\n      </p>\n\n      <p>\n        <rg-button tabindex=\"1\">\n          <span>Press me</span>\n          <rg-icon size=\"16\" glyph=\"{{close}}\"></rg-icon>\n        </rg-button>\n        <rg-button tabindex=\"2\">\n          <rg-icon size=\"16\" glyph=\"{{close}}\"></rg-icon>\n          <span>Press me</span>\n        </rg-button>\n        <rg-button tabindex=\"3\">\n          <rg-icon size=\"16\" glyph=\"{{close}}\"></rg-icon>\n          <span>Press me</span>\n          <rg-icon size=\"16\" glyph=\"{{close}}\"></rg-icon>\n        </rg-button>\n        <rg-button tabindex=\"4\">\n          <span>Press me</span>\n          <rg-icon size=\"16\" glyph=\"{{close}}\"></rg-icon>\n          <span>Press me</span>\n        </rg-button>\n      </p>\n    </div>\n  </rg-theme>\n</div>\n  ",
          "showCode": true
        },
        {
          "type": "js",
          "content": "\nimport angular from 'angular';\nimport ButtonNG from '@jetbrains/ring-ui/components/button-ng/button-ng';\nimport IconNG from '@jetbrains/ring-ui/components/icon-ng/icon-ng';\nimport ThemeNG from '@jetbrains/ring-ui/components/theme-ng/theme-ng';\nimport CheckboxNG from '@jetbrains/ring-ui/components/checkbox-ng/checkbox-ng';\nimport Theme from '@jetbrains/ring-ui/components/global/theme';\n\nimport {\nPencilIcon,\nChevronDownIcon,\nCloseIcon,\nPermissionIcon\n} from '@jetbrains/ring-ui/components/icon';\n\nangular.module('test', [ButtonNG, IconNG, ThemeNG, CheckboxNG])\n  .controller('testCtrl', function ($scope) {\n    $scope.pencil = PencilIcon;\n    $scope.chevronDown = ChevronDownIcon;\n    $scope.close = CloseIcon;\n    $scope.permission = PermissionIcon;\n    $scope.Theme = Theme;\n  })\n  ",
          "showCode": true
        }
      ]
    },
    {
      "name": "Button Ng with default Dark theme",
      "url": "examples/button-ng/button-ng-with-default-dark-theme.html",
      "disableAutoSize": false,
      "files": [
        {
          "type": "css",
          "content": "\np {\n  margin: 16px 0;\n}\n\n:global(.dark) {\n  margin: -8px;\n  padding: 8px;\n  background: #000;\n}\n  ",
          "showCode": true
        },
        {
          "type": "html",
          "content": "\n<div ng-app=\"test\"\n     ng-strict-di\n     ng-controller=\"testCtrl\">\n\n    <rg-checkbox ng-model=\"$root.checkbox\"\n                 ng-change=\"$root.currentTheme = $root.checkbox ? Theme.DARK : Theme.LIGHT\">\n      <b>Dark theme</b>\n    </rg-checkbox>\n\n    <rg-theme theme=\"$root.currentTheme\">\n      <div style=\"margin: 8px 0 0 8px; padding: 1px 14px\"\n           ng-style=\"{'background-color': $root.checkbox === true ? 'black' : 'inherit'}\">\n        <p>\n          <rg-button>Press me</rg-button>\n          <rg-button>Press me Press me Press me Press me Press me</rg-button>\n          <rg-button disabled=\"true\">Press me</rg-button>\n          <rg-button loader=\"true\">Press me</rg-button>\n          <rg-button delayed=\"true\">Press me</rg-button>\n          <rg-button text=\"true\">Press me</rg-button>\n        </p>\n\n        <p>\n          <rg-button mode=\"primary\">Press me</rg-button>\n          <rg-button mode=\"primary\">Press me Press me Press me Press me Press me</rg-button>\n          <rg-button mode=\"primary\" disabled=\"true\">Press me</rg-button>\n          <rg-button mode=\"primary\" loader=\"true\">Press me</rg-button>\n          <rg-button mode=\"primary\" delayed=\"true\">Press me</rg-button>\n          <rg-button mode=\"primary\" text=\"true\">Press me</rg-button>\n        </p>\n\n        <p>\n          <rg-button>Press me</rg-button>\n          <rg-button icon=\"{{close}}\">Action with icon</rg-button>\n          <rg-button narrow-right=\"true\">Dropdown <rg-icon glyph=\"{{chevronDown}}\" size=\"16\" color=\"GRAY\"></rg-icon></rg-button>\n          <rg-button icon=\"{{close}}\" mode=\"primary\"></rg-button>\n          <rg-button icon=\"{{permission}}\" disabled=\"true\"></rg-button>\n          <rg-button icon=\"{{pencil}}\" loader=\"true\"></rg-button>\n          <rg-button>Press me</rg-button>\n        </p>\n\n        <p>\n          <rg-button danger=\"true\">Press me</rg-button>\n          <rg-button danger=\"true\" disabled=\"true\">Press me</rg-button>\n          <rg-button danger=\"true\" loader=\"true\">Press me</rg-button>\n          <rg-button danger=\"true\" icon=\"{{pencil}}\"></rg-button>\n        </p>\n\n        <p>\n          <rg-button-link href=\"/button-link\">Button link</rg-button-link>\n          <rg-button-link href=\"/button-link\" disabled=\"true\">Button link\n          </rg-button-link>\n          <rg-button-link href=\"/button-link\" loader=\"true\">Button link\n          </rg-button-link>\n          <rg-button-link href=\"/button-link\" icon=\"{{pencil}}\"></rg-button-link>\n        </p>\n\n        <p>\n          <rg-button tabindex=\"1\">\n            <span>Press me</span>\n            <rg-icon size=\"16\" glyph=\"{{close}}\"></rg-icon>\n          </rg-button>\n          <rg-button tabindex=\"2\">\n            <rg-icon size=\"16\" glyph=\"{{close}}\"></rg-icon>\n            <span>Press me</span>\n          </rg-button>\n          <rg-button tabindex=\"3\">\n            <rg-icon size=\"16\" glyph=\"{{close}}\"></rg-icon>\n            <span>Press me</span>\n            <rg-icon size=\"16\" glyph=\"{{close}}\"></rg-icon>\n          </rg-button>\n          <rg-button tabindex=\"4\">\n            <span>Press me</span>\n            <rg-icon size=\"16\" glyph=\"{{close}}\"></rg-icon>\n            <span>Press me</span>\n          </rg-button>\n        </p>\n      </div>\n    </rg-theme>\n\n</div>\n  ",
          "showCode": true
        },
        {
          "type": "js",
          "content": "\nimport angular from 'angular';\nimport ButtonNG from '@jetbrains/ring-ui/components/button-ng/button-ng';\nimport IconNG from '@jetbrains/ring-ui/components/icon-ng/icon-ng';\nimport ThemeNG from '@jetbrains/ring-ui/components/theme-ng/theme-ng';\nimport CheckboxNG from '@jetbrains/ring-ui/components/checkbox-ng/checkbox-ng';\nimport Theme from '@jetbrains/ring-ui/components/global/theme';\n\nimport {\n  PencilIcon,\n  ChevronDownIcon,\n  CloseIcon,\n  PermissionIcon\n} from '@jetbrains/ring-ui/components/icon';\n\nangular.module('test', [ButtonNG, IconNG, ThemeNG, CheckboxNG])\n  .run($rootScope => {\n    $rootScope.checkbox = true;\n    $rootScope.currentTheme = 'dark';\n  })\n  .controller('testCtrl', function ($scope) {\n    $scope.pencil = PencilIcon;\n    $scope.chevronDown = ChevronDownIcon;\n    $scope.close = CloseIcon;\n    $scope.permission = PermissionIcon;\n    $scope.Theme = Theme;\n  })\n  ",
          "showCode": true
        }
      ]
    }
  ],
  "description": "Provides an Angular wrapper for Button.",
  "attrs": {
    "name": "Button Ng",
    "tags": "Ring UI Language",
    "category": "Legacy Angular",
    "description": "Provides an Angular wrapper for Button.",
    "example-file": "./button-ng.examples.html"
  }
};
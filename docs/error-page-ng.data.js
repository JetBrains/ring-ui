window.source = {
  "title": "Error Page Ng",
  "url": "error-page-ng.html",
  "type": "js",
  "content": "import angular from 'angular';\nimport 'dom4';\n\nimport {FrownIcon, PermissionIcon} from '../icon';\n\nimport '../error-page/error-page.scss';\nimport ErrorMessage from '../error-message-ng/error-message-ng';\nimport Permissions from '../permissions-ng/permissions-ng';\nimport MessageBundle from '../message-bundle-ng/message-bundle-ng';\n\n/**\n * @name Error Page Ng\n * @category Legacy Angular\n * @description Displays an error page, e.g. 404 Not Found.\n * @example\n   <example name=\"Error Page Ng\">\n     <file name=\"index.html\" disable-auto-size>\n      <div ng-app=\"Ring.error-page\" ng-strict-di>\n          <div class=\"app\" rg-error-page-background>\n              <div rg-error-page=\"{error: {status: 403}}\"></div>\n          </div>\n      </div>\n     </file>\n     <file name=\"index.css\">\n       body {\n          margin: 0;\n       }\n     </file>\n     <file name=\"index.js\" webpack=\"true\">\n        import angular from 'angular';\n        import AngularRoute from 'angular-route';\n        import ErrorPageNG from '@jetbrains/ring-ui/components/error-page-ng/error-page-ng';\n        import authMock from '@jetbrains/ring-ui/components/auth-ng/auth-ng.mock';\n\n        angular.module('Ring.auth', [AngularRoute, ErrorPageNG]).provider('auth', authMock);\n     </file>\n   </example>\n */\n\nconst angularModule = angular.module('Ring.error-page', [\n  'ngRoute',\n  ErrorMessage,\n  Permissions,\n  MessageBundle\n]);\n\nangularModule.provider('errorPageConfiguration', function errorPageConfigurationProvider() {\n  let pageConfiguration = {};\n\n  /**\n   * @param {Object} config\n   * @param {?String} config.responseToMessageConverter - name of converter from response to error message factory\n   * @param {?Array.<String>} config.links - name of factory which should return array of links to show on error page\n   */\n  this.config = config => {\n    pageConfiguration = config;\n  };\n\n  this.$get = function get($injector, $log) {\n    function loadFactory(factoryName) {\n      try {\n        return $injector.get(factoryName);\n      } catch (err) {\n        $log.debug(`errorPageConfiguration: unable to load ${factoryName}`);\n        return undefined;\n      }\n    }\n\n    let responseToMessageConverter;\n    if (pageConfiguration.responseToMessageConverter) {\n      responseToMessageConverter = loadFactory(pageConfiguration.responseToMessageConverter);\n    }\n\n    let links;\n    if (pageConfiguration.links) {\n      links = loadFactory(pageConfiguration.links);\n    }\n\n    return {\n      responseToMessageConverter: responseToMessageConverter || angular.noop,\n      links: links || []\n    };\n  };\n});\n\nangularModule.factory('getErrorPagePresentation', RingMessageBundle => error => {\n  const presentationModels = {\n    404: {\n      status: 404,\n      title: RingMessageBundle.errorpage_404(),\n      description: RingMessageBundle.errorpage_404msg(),\n      icon: FrownIcon\n    },\n    403: {\n      status: 403,\n      title: RingMessageBundle.errorpage_403(),\n      description: RingMessageBundle.errorpage_403msg(),\n      icon: PermissionIcon\n    },\n    500: {\n      status: 500,\n      title: RingMessageBundle.errorpage_500(),\n      description: RingMessageBundle.errorpage_500msg(),\n      icon: FrownIcon\n    },\n    0: {\n      status: RingMessageBundle.errorpage_disconnected(),\n      title: RingMessageBundle.errorpage_disconnectedmsg(),\n      description: RingMessageBundle.errorpage_offline(),\n      icon: FrownIcon\n    },\n    default: {\n      title: RingMessageBundle.errorpage_seriouslywrong(),\n      icon: FrownIcon\n    }\n  };\n\n  if (error.status in presentationModels) {\n    return presentationModels[error.status];\n  }\n  return angular.extend({\n    status: error.status,\n    description: error.message\n  }, presentationModels.default);\n});\n\nangularModule.directive('rgErrorPageBackground', function rgErrorPageBackgroundDirective() {\n  return {\n    restrict: 'A',\n\n    controller: function controller($scope) {\n      this.setApplicationError = applicationError => {\n        $scope.applicationError = applicationError;\n      };\n    },\n\n    link: function link(scope, iElement) {\n      const element = iElement[0];\n      element.classList.add('error-page');\n\n      scope.$watch('applicationError', newValue => {\n        if (newValue) {\n          element.classList.add('error-page_enabled');\n        } else {\n          element.classList.remove('error-page_enabled');\n        }\n      });\n    }\n  };\n});\n\nangularModule.directive('rgErrorPage', [\n  'errorPageConfiguration',\n  '$route',\n  'userPermissions',\n  '$log',\n  'getErrorPagePresentation',\n  '$q',\n  '$compile',\n  (\n    errorPageConfiguration,\n    $route,\n    userPermissions,\n    $log,\n    getErrorPagePresentation,\n    $q,\n    $compile\n  ) => {\n    function getArgumentPromise(errorSource, errorPageParameterPresentation) {\n      const promise = errorSource && (errorSource.$promise || errorSource.promise);\n\n      if (promise) {\n        return $q((resolve, reject) => {\n          promise.\n            then(data => {\n              resolve();\n              return data;\n            }).\n            catch(errorResponse => {\n              $log.debug(`Navigation: errorSource ${errorPageParameterPresentation} not permitted, status: ${status}`);\n\n              reject({\n                status: errorResponse && errorResponse.status,\n                message: errorPageConfiguration.responseToMessageConverter(errorResponse)\n              });\n\n              return errorResponse;\n            });\n        });\n      } else {\n        return $q.resolve();\n      }\n    }\n\n    function getRoutingPermissionPromise() {\n      /* eslint-disable angular/no-private-call */\n      if ($route.current && $route.current.$$route && $route.current.$$route.permission) {\n        const pagePermission = $route.current.$$route.permission;\n        /* eslint-enable angular/no-private-call */\n\n        let resolve;\n        let reject;\n\n        userPermissions.load().then(permissionCache => {\n          if (!permissionCache.has(pagePermission)) {\n            $log.debug(`Navigation: no page${pagePermission} permission, status 403`);\n            reject({status: 403});\n          } else {\n            resolve();\n          }\n        });\n\n        return $q((...args) => {\n          [resolve, reject] = args;\n        });\n      } else {\n        return $q.resolve();\n      }\n    }\n\n    return {\n      replace: true,\n      transclude: true,\n      template: '<div></div>',\n      require: '?^rgErrorPageBackground',\n      link: function link(scope, iElement, iAttrs, errorPageBackgroundCtrl, transclude) {\n        function handleError(error) {\n          transclude(scope, clone => {\n            const cloneWrapper = document.createElement('div');\n            cloneWrapper.className = 'ng-hide';\n            angular.element(cloneWrapper).append(clone);\n            iElement.append(cloneWrapper);\n\n            scope.error = getErrorPagePresentation(error);\n            scope.links = errorPageConfiguration.links;\n\n            const template = require('./error-page-ng.html');\n            const el = $compile(angular.element(template))(scope);\n            iElement.append(el);\n            if (errorPageBackgroundCtrl) {\n              errorPageBackgroundCtrl.setApplicationError(true);\n            }\n\n            if (errorPageBackgroundCtrl) {\n              const destroyEvent = (scope === scope.$root) ? '$routeChangeStart' : '$destroy';\n              scope.$on(destroyEvent, () => {\n                errorPageBackgroundCtrl.setApplicationError(false);\n              });\n            }\n          });\n        }\n\n        function handleSuccess() {\n          transclude(scope, clone => {\n            iElement.append(clone);\n          });\n        }\n\n        getRoutingPermissionPromise().then(() => {\n          const errorSource = scope.$eval(iAttrs.rgErrorPage);\n          if (errorSource && errorSource.error) {\n            handleError(errorSource.error);\n            $log.debug(`Navigation: errorSource ${iAttrs.rgErrorPage} not permitted, status: ${status}`);\n          } else {\n            getArgumentPromise(errorSource, iAttrs.rgErrorPage).\n              then(handleSuccess).\n              catch(handleError);\n          }\n        }, handleError);\n      }\n    };\n  }\n]);\n\nexport default angularModule.name;\n",
  "examples": [
    {
      "name": "Error Page Ng",
      "url": "examples/error-page-ng/error-page-ng.html",
      "disableAutoSize": true,
      "files": [
        {
          "type": "html",
          "content": "\n<div ng-app=\"Ring.error-page\" ng-strict-di>\n    <div class=\"app\" rg-error-page-background>\n        <div rg-error-page=\"{error: {status: 403}}\"></div>\n    </div>\n</div>\n     ",
          "showCode": true
        },
        {
          "type": "css",
          "content": "\nbody {\n   margin: 0;\n}\n     ",
          "showCode": true
        },
        {
          "type": "js",
          "content": "\nimport angular from 'angular';\nimport AngularRoute from 'angular-route';\nimport ErrorPageNG from '@jetbrains/ring-ui/components/error-page-ng/error-page-ng';\nimport authMock from '@jetbrains/ring-ui/components/auth-ng/auth-ng.mock';\n\nangular.module('Ring.auth', [AngularRoute, ErrorPageNG]).provider('auth', authMock);\n     ",
          "showCode": true
        }
      ]
    }
  ],
  "description": "Displays an error page, e.g. 404 Not Found.",
  "attrs": {
    "name": "Error Page Ng",
    "category": "Legacy Angular",
    "description": "Displays an error page, e.g. 404 Not Found.",
    "example": "   <example name=\"Error Page Ng\">\n     <file name=\"index.html\" disable-auto-size>\n      <div ng-app=\"Ring.error-page\" ng-strict-di>\n          <div class=\"app\" rg-error-page-background>\n              <div rg-error-page=\"{error: {status: 403}}\"></div>\n          </div>\n      </div>\n     </file>\n     <file name=\"index.css\">\n       body {\n          margin: 0;\n       }\n     </file>\n     <file name=\"index.js\" webpack=\"true\">\n        import angular from 'angular';\n        import AngularRoute from 'angular-route';\n        import ErrorPageNG from '@jetbrains/ring-ui/components/error-page-ng/error-page-ng';\n        import authMock from '@jetbrains/ring-ui/components/auth-ng/auth-ng.mock';\n\n        angular.module('Ring.auth', [AngularRoute, ErrorPageNG]).provider('auth', authMock);\n     </file>\n   </example>"
  }
};